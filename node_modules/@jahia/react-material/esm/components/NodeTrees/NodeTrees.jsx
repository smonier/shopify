import React from 'react';
import PropTypes from 'prop-types';
import { withStyles } from '@material-ui/core';
import { compose } from 'recompose';
var styles = function styles() {
  return {
    listContainer: {
      flex: '1 0 0%',
      overflow: 'auto',
      width: '260px'
    },
    list: {
      width: 'fit-content',
      minWidth: '100%'
    }
  };
};
var NodeTreesCmp = function NodeTreesCmp(_ref) {
  var path = _ref.path,
    rootPath = _ref.rootPath,
    siteKey = _ref.siteKey,
    classes = _ref.classes,
    nodeTreeConfigs = _ref.nodeTreeConfigs,
    _setRefetch = _ref.setRefetch,
    children = _ref.children;
  var root = rootPath || '/sites/' + siteKey;
  var usedPath = path.startsWith(root) ? path : root;
  return /*#__PURE__*/React.createElement("div", {
    className: classes.listContainer
  }, /*#__PURE__*/React.createElement("div", {
    className: classes.list
  }, nodeTreeConfigs.map(function (nodeTreeConfig) {
    return /*#__PURE__*/React.createElement(React.Fragment, {
      key: nodeTreeConfig.key
    }, children({
      path: usedPath,
      rootPath: nodeTreeConfig.rootPath.startsWith(root) ? nodeTreeConfig.rootPath : root + nodeTreeConfig.rootPath,
      selectableTypes: nodeTreeConfig.selectableTypes,
      dataCmRole: nodeTreeConfig.key,
      openableTypes: nodeTreeConfig.openableTypes,
      rootLabel: nodeTreeConfig.rootLabel,
      setRefetch: function setRefetch(refetchingData) {
        return _setRefetch ? _setRefetch(nodeTreeConfig.key, refetchingData) : undefined;
      }
    }));
  })));
};
NodeTreesCmp.defaultProps = {
  rootPath: undefined,
  setRefetch: null
};
NodeTreesCmp.propTypes = {
  classes: PropTypes.object.isRequired,
  path: PropTypes.string.isRequired,
  siteKey: PropTypes.string.isRequired,
  nodeTreeConfigs: PropTypes.arrayOf(PropTypes.object).isRequired,
  children: PropTypes.func.isRequired,
  rootPath: PropTypes.string,
  setRefetch: PropTypes.func
};
export var NodeTrees = compose(withStyles(styles, {
  withTheme: true
}))(NodeTreesCmp);