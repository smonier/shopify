function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
import React from 'react';
import { withTranslation } from 'react-i18next';
import { IconButton, Table, TableFooter, TablePagination, TableRow, withStyles } from '@material-ui/core';
import { FirstPage, KeyboardArrowLeft, KeyboardArrowRight, LastPage } from '@material-ui/icons';
import PropTypes from 'prop-types';
var actionsStyles = function actionsStyles(theme) {
  return {
    root: {
      flexShrink: 0,
      marginLeft: theme.spacing.unit * 2.5
    }
  };
};
var TablePaginationActionsCmp = /*#__PURE__*/function (_React$Component) {
  _inherits(TablePaginationActionsCmp, _React$Component);
  var _super = _createSuper(TablePaginationActionsCmp);
  function TablePaginationActionsCmp(props) {
    var _this;
    _classCallCheck(this, TablePaginationActionsCmp);
    _this = _super.call(this, props);
    _this.handleFirstPageButtonClick = _this.handleFirstPageButtonClick.bind(_assertThisInitialized(_this));
    _this.handleBackButtonClick = _this.handleBackButtonClick.bind(_assertThisInitialized(_this));
    _this.handleNextButtonClick = _this.handleNextButtonClick.bind(_assertThisInitialized(_this));
    _this.handleLastPageButtonClick = _this.handleLastPageButtonClick.bind(_assertThisInitialized(_this));
    return _this;
  }
  _createClass(TablePaginationActionsCmp, [{
    key: "handleFirstPageButtonClick",
    value: function handleFirstPageButtonClick(event) {
      this.props.onChangePage(event, 0);
    }
  }, {
    key: "handleBackButtonClick",
    value: function handleBackButtonClick(event) {
      this.props.onChangePage(event, this.props.page - 1);
    }
  }, {
    key: "handleNextButtonClick",
    value: function handleNextButtonClick(event) {
      this.props.onChangePage(event, this.props.page + 1);
    }
  }, {
    key: "handleLastPageButtonClick",
    value: function handleLastPageButtonClick(event) {
      this.props.onChangePage(event, Math.max(0, Math.ceil(this.props.count / this.props.rowsPerPage) - 1));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
        classes = _this$props.classes,
        count = _this$props.count,
        page = _this$props.page,
        rowsPerPage = _this$props.rowsPerPage;
      return /*#__PURE__*/React.createElement("div", {
        className: classes.root
      }, /*#__PURE__*/React.createElement(IconButton, {
        disabled: page === 0,
        "aria-label": "First Page",
        "data-jrm-role": "table-pagination-button-first-page",
        onClick: this.handleFirstPageButtonClick
      }, /*#__PURE__*/React.createElement(FirstPage, null)), /*#__PURE__*/React.createElement(IconButton, {
        disabled: page === 0,
        "aria-label": "Previous Page",
        onClick: this.handleBackButtonClick
      }, /*#__PURE__*/React.createElement(KeyboardArrowLeft, null)), /*#__PURE__*/React.createElement(IconButton, {
        disabled: page >= Math.ceil(count / rowsPerPage) - 1,
        "aria-label": "Next Page",
        "data-jrm-role": "table-pagination-button-next-page",
        onClick: this.handleNextButtonClick
      }, /*#__PURE__*/React.createElement(KeyboardArrowRight, null)), /*#__PURE__*/React.createElement(IconButton, {
        disabled: page >= Math.ceil(count / rowsPerPage) - 1,
        "aria-label": "Last Page",
        onClick: this.handleLastPageButtonClick
      }, /*#__PURE__*/React.createElement(LastPage, null)));
    }
  }]);
  return TablePaginationActionsCmp;
}(React.Component);
TablePaginationActionsCmp.propTypes = {
  onChangePage: PropTypes.func.isRequired,
  classes: PropTypes.object.isRequired,
  count: PropTypes.number.isRequired,
  page: PropTypes.number.isRequired,
  rowsPerPage: PropTypes.number.isRequired
};
var TablePaginationActions = withStyles(actionsStyles, {
  name: 'DxPaginationActions',
  withTheme: true
})(TablePaginationActionsCmp);
var PaginationCmp = /*#__PURE__*/function (_React$Component2) {
  _inherits(PaginationCmp, _React$Component2);
  var _super2 = _createSuper(PaginationCmp);
  function PaginationCmp(props) {
    var _this2;
    _classCallCheck(this, PaginationCmp);
    _this2 = _super2.call(this, props);
    _this2.onChangePage = _this2.onChangePage.bind(_assertThisInitialized(_this2));
    return _this2;
  }
  _createClass(PaginationCmp, [{
    key: "onChangePage",
    value: function onChangePage(event, page) {
      this.props.onChangePage(page);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
        totalCount = _this$props2.totalCount,
        pageSize = _this$props2.pageSize,
        currentPage = _this$props2.currentPage,
        _onChangeRowsPerPage = _this$props2.onChangeRowsPerPage,
        labels = _this$props2.labels;
      return /*#__PURE__*/React.createElement(Table, null, /*#__PURE__*/React.createElement(TableFooter, null, /*#__PURE__*/React.createElement(TableRow, null, /*#__PURE__*/React.createElement(TablePagination, {
        count: totalCount,
        rowsPerPage: pageSize,
        page: currentPage,
        ActionsComponent: TablePaginationActions,
        labelRowsPerPage: labels.labelRowsPerPage,
        labelDisplayedRows: function labelDisplayedRows(_ref) {
          var from = _ref.from,
            to = _ref.to,
            count = _ref.count;
          return "".concat(from, "-").concat(to, " ") + labels.of + " ".concat(count);
        },
        "data-jrm-role": "table-pagination",
        onChangePage: this.onChangePage,
        onChangeRowsPerPage: function onChangeRowsPerPage(event) {
          return _onChangeRowsPerPage(event.target.value);
        }
      }))));
    }
  }]);
  return PaginationCmp;
}(React.Component);
PaginationCmp.propTypes = {
  totalCount: PropTypes.number.isRequired,
  pageSize: PropTypes.number.isRequired,
  currentPage: PropTypes.number.isRequired,
  onChangeRowsPerPage: PropTypes.func.isRequired,
  onChangePage: PropTypes.func.isRequired,
  labels: PropTypes.shape({
    labelRowsPerPage: PropTypes.string.isRequired,
    of: PropTypes.string.isRequired
  })
};
export var Pagination = withTranslation()(PaginationCmp);