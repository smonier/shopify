function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
import React from 'react';
import PropTypes from 'prop-types';
import { List, ListItem, ListItemIcon, ListItemText, CircularProgress, withStyles, withTheme } from '@material-ui/core';
import { IconButton, Typography } from '@jahia/design-system-kit';
import { KeyboardArrowRight } from '@material-ui/icons';
import defaultIconRenderer from './iconRenderer';
import { compose } from 'recompose';
import classNames from 'classnames';
var styles = function styles(theme) {
  return {
    root: {
      width: '100%'
    },
    loading: {
      left: '17%',
      position: 'fixed',
      top: '50%'
    },
    listItemSelected: {
      background: theme.palette.primary.main,
      color: theme.palette.primary.contrastText
    },
    listItem: {
      paddingLeft: theme.spacing.unit,
      height: theme.spacing.unit * 6,
      whiteSpace: 'nowrap',
      color: theme.palette.text.secondary
    },
    listItemDeleted: {
      color: theme.palette.text.disabled,
      textDecoration: 'line-through'
    },
    listItemNodeTypeIcon: {
      marginRight: '5px',
      color: 'inherit'
    },
    listItemActionIcon: {
      position: 'absolute',
      height: '48px',
      width: '48px',
      top: '0px',
      '& button': {
        width: '48px'
      }
    },
    openedTreeEl: {
      transform: 'rotate(90deg)',
      color: 'inherit'
    },
    closedTreeEl: {
      color: 'inherit'
    },
    treeEntry: {
      display: 'flex',
      alignItems: 'center',
      cursor: 'pointer'
    },
    unpublishedEntryLabel: {
      fontStyle: 'italic'
    }
  };
};
var PickerTreeViewMaterialCmp = /*#__PURE__*/function (_React$Component) {
  _inherits(PickerTreeViewMaterialCmp, _React$Component);
  var _super = _createSuper(PickerTreeViewMaterialCmp);
  function PickerTreeViewMaterialCmp() {
    _classCallCheck(this, PickerTreeViewMaterialCmp);
    return _super.apply(this, arguments);
  }
  _createClass(PickerTreeViewMaterialCmp, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        classes = _this$props.classes,
        pickerEntries = _this$props.pickerEntries,
        onOpenItem = _this$props.onOpenItem,
        onSelectItem = _this$props.onSelectItem,
        rootLabel = _this$props.rootLabel,
        iconRenderer = _this$props.iconRenderer,
        loading = _this$props.loading,
        dataCmRole = _this$props.dataCmRole;
      // Sorts entries that are folder types
      var sortedEntries = this.sortFoldersAlphabetical(pickerEntries);
      return /*#__PURE__*/React.createElement("div", {
        className: classes.root
      }, loading && /*#__PURE__*/React.createElement(CircularProgress, {
        classes: {
          root: classes.loading
        }
      }), /*#__PURE__*/React.createElement(List, {
        disablePadding: true,
        classes: {
          root: classes.root
        }
      }, sortedEntries.map(function (entry) {
        var itemClass = classNames(classes.listItem, _defineProperty({}, classes.listItemSelected, entry.selected));
        return /*#__PURE__*/React.createElement(ListItem, {
          key: entry.path,
          "data-jrm-role": "picker-item",
          "data-cm-role": dataCmRole,
          className: itemClass,
          onDoubleClick: function onDoubleClick() {
            return onOpenItem(entry.path, !entry.open);
          }
        }, /*#__PURE__*/React.createElement("div", {
          style: {
            paddingLeft: entry.depth > 0 ? entry.depth * 16 : 0,
            opacity: entry.openable && entry.hasChildren ? 1 : 0
          }
        }, /*#__PURE__*/React.createElement(IconButton, {
          icon: /*#__PURE__*/React.createElement(KeyboardArrowRight, null),
          className: entry.open ? classes.openedTreeEl : classes.closedTreeEl,
          disabled: !(entry.openable && entry.hasChildren),
          "data-jrm-role": "picker-item-toggle",
          "data-jrm-state": entry.open ? 'open' : 'closed',
          onClick: function onClick(event) {
            onOpenItem(entry.path, !entry.open);
            event.stopPropagation();
          }
        })), /*#__PURE__*/React.createElement("span", {
          className: classes.treeEntry,
          onClick: function onClick() {
            return entry.selectable ? onSelectItem(entry.path, !entry.selected) : null;
          }
        }, /*#__PURE__*/React.createElement(ListItemIcon, {
          className: classes.listItemNodeTypeIcon
        }, iconRenderer(entry)), /*#__PURE__*/React.createElement(ListItemText, {
          disableTypography: true,
          inset: true,
          className: entry.node.primaryNodeType.name === 'jnt:page' && entry.node.publicationStatus && entry.node.publicationStatus.publicationStatus === 'UNPUBLISHED' ? classes.unpublishedEntryLabel : null,
          primary: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Typography, {
            color: "inherit"
          }, entry.depth > 0 ? entry.node.displayName : rootLabel)),
          "data-jrm-role": "picker-item-text"
        })));
      })));
    }
  }, {
    key: "sortFoldersAlphabetical",
    value: function sortFoldersAlphabetical(pickerEntries) {
      if (pickerEntries.length !== 0 && pickerEntries[0] && (pickerEntries[0].node.primaryNodeType.name === 'jnt:contentFolder' || pickerEntries[0].node.primaryNodeType.name === 'jnt:folder')) {
        var rootNode = this.reconstructNodeHierarchy(JSON.parse(JSON.stringify(pickerEntries)));
        return this.sortAndFlatten(rootNode);
      }
      return pickerEntries;
    }
  }, {
    key: "reconstructNodeHierarchy",
    value: function reconstructNodeHierarchy(pickerEntriesSortedByPath) {
      var hierarchyStack = [];

      // Add root node to stack
      hierarchyStack.push(pickerEntriesSortedByPath.splice(0, 1)[0]);
      while (pickerEntriesSortedByPath.length !== 0 && hierarchyStack.length !== 0) {
        var currentPickerEntry = pickerEntriesSortedByPath[0];
        var top = hierarchyStack[hierarchyStack.length - 1];

        // Add children to top of the stack if current entry is child of top
        if (currentPickerEntry.path.indexOf(top.path) !== -1 && currentPickerEntry.path.replace(top.path, '')[0] === '/') {
          if (!top.children) {
            top.children = [];
          }
          top.children.push(currentPickerEntry);
          hierarchyStack.push(currentPickerEntry);
          pickerEntriesSortedByPath.splice(0, 1);
        } else {
          hierarchyStack.pop();
        }
      }
      return hierarchyStack[0];
    }
  }, {
    key: "sortAndFlatten",
    value: function sortAndFlatten(rootNode) {
      var flatArray = [];
      dfs(rootNode);
      function dfs(node) {
        flatArray.push(node);
        if (node.children) {
          node.children.sort(function (a, b) {
            var A = a.node.displayName.toLocaleLowerCase();
            var B = b.node.displayName.toLocaleLowerCase();
            if (A < B) {
              return -1;
            }
            if (A > B) {
              return 1;
            }
            return 0;
          });
          for (var i = 0; i < node.children.length; i++) {
            dfs(node.children[i]);
          }
        }
      }
      return flatArray;
    }
  }]);
  return PickerTreeViewMaterialCmp;
}(React.Component);
PickerTreeViewMaterialCmp.propTypes = {
  classes: PropTypes.object.isRequired,
  dataCmRole: PropTypes.string.isRequired,
  iconRenderer: PropTypes.func,
  // eslint-disable-next-line react/boolean-prop-naming
  loading: PropTypes.bool.isRequired,
  onOpenItem: PropTypes.func,
  onSelectItem: PropTypes.func,
  pickerEntries: PropTypes.array.isRequired,
  rootLabel: PropTypes.string.isRequired
};
PickerTreeViewMaterialCmp.defaultProps = {
  iconRenderer: defaultIconRenderer,
  onSelectItem: function onSelectItem() {},
  onOpenItem: function onOpenItem() {}
};
export var PickerTreeViewMaterial = compose(withTheme(), withStyles(styles, {
  name: 'DxPickerTreeViewMaterial'
}))(PickerTreeViewMaterialCmp);