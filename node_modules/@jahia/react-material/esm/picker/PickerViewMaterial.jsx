import React from 'react';
import { IconButton, List, ListItem, ListItemIcon, ListItemText, withStyles, withTheme } from '@material-ui/core';
import { KeyboardArrowDown, KeyboardArrowRight } from '@material-ui/icons';
import PropTypes from 'prop-types';
import defaultIconRenderer from './iconRenderer';
var styles = function styles() {
  return {
    root: {
      position: 'relative'
    },
    loading: {
      opacity: 0.8
    },
    listItemSelected: {
      background: '#00a0e3',
      color: 'whitesmoke',
      '&:hover': {
        background: '#00a0e3',
        color: 'whitesmoke'
      }
    },
    listItem: {
      padding: '5px 10px 5px 0'
    },
    listItemLabel: {
      padding: '0px',
      '& h3': {
        fontSize: '0.875rem',
        color: '#676767',
        fontWeight: '100'
      }
    },
    listItemToggle: {
      marginRight: '10px',
      borderRadius: '0',
      width: 'auto'
    },
    listItemNodeTypeIcon: {
      marginRight: '5px'
    },
    selectedText: {
      color: 'whitesmoke!important'
    },
    loadingContainer: {
      position: 'absolute',
      width: '100%',
      height: '100%',
      zIndex: 999
    },
    toggleUnSelected: {
      color: '#00a0e3'
    },
    toggleSelected: {
      color: 'whitesmoke'
    },
    buttonContainer: {
      '&:hover': {
        backgroundColor: 'transparent'
      }
    }
  };
};
var PickerViewMaterial = function PickerViewMaterial(props) {
  var _this = this;
  var classes = props.classes,
    pickerEntries = props.pickerEntries,
    onOpenItem = props.onOpenItem,
    onSelectItem = props.onSelectItem,
    textRenderer = props.textRenderer,
    iconRenderer = props.iconRenderer,
    loading = props.loading;
  return /*#__PURE__*/React.createElement("div", {
    className: classes.root
  }, loading && /*#__PURE__*/React.createElement("div", {
    className: classes.loadingContainer
  }), /*#__PURE__*/React.createElement(List, {
    disablePadding: true,
    classes: {
      root: loading ? classes.root + ' ' + classes.loading : classes.root
    }
  }, pickerEntries.map(function (entry) {
    return /*#__PURE__*/React.createElement(ListItem, {
      key: entry.path,
      button: true,
      divider: true,
      "data-jrm-role": "picker-item",
      className: entry.selected ? classes.listItem + ' ' + classes.listItemSelected : classes.listItem,
      onClick: function onClick() {
        return entry.selectable ? onSelectItem(entry.path, !entry.selected) : onOpenItem(entry.path, !entry.open);
      }
    }, /*#__PURE__*/React.createElement(ListItemIcon, {
      className: entry.selected ? classes.listItemToggle + ' ' + classes.selectedText : classes.listItemToggle,
      style: {
        paddingLeft: (entry.depth + 1) * 20,
        opacity: entry.openable && entry.hasChildren ? 1 : 0
      }
    }, /*#__PURE__*/React.createElement(IconButton, {
      className: classes.buttonContainer,
      disabled: !(entry.openable && entry.hasChildren),
      "data-jrm-role": "picker-item-toggle",
      "data-jrm-state": entry.open ? 'open' : 'closed',
      onClick: function onClick(event) {
        onOpenItem(entry.path, !entry.open);
        event.stopPropagation();
      }
    }, entry.open ? /*#__PURE__*/React.createElement(KeyboardArrowDown, {
      className: entry.selected ? classes.toggleSelected : classes.toggleUnSelected
    }) : /*#__PURE__*/React.createElement(KeyboardArrowRight, {
      className: entry.selected ? classes.toggleSelected : classes.toggleUnSelected
    }))), /*#__PURE__*/React.createElement(ListItemIcon, {
      className: entry.selected ? classes.listItemNodeTypeIcon + ' ' + classes.selectedText : classes.listItemNodeTypeIcon
    }, iconRenderer ? iconRenderer.call(_this, entry) : defaultIconRenderer.call(_this, entry)), /*#__PURE__*/React.createElement(ListItemText, {
      inset: true,
      classes: entry.selected ? {
        root: classes.listItemLabel,
        primary: classes.selectedText
      } : {
        root: classes.listItemLabel
      },
      primary: textRenderer ? textRenderer.call(_this, entry) : entry.name,
      primaryTypographyProps: {
        'data-jrm-role': 'picker-item-text'
      }
    }));
  })));
};
PickerViewMaterial.defaultProps = {
  onSelectItem: function onSelectItem() {},
  onOpenItem: function onOpenItem() {},
  textRenderer: function textRenderer() {},
  iconRenderer: null
};
PickerViewMaterial.propTypes = {
  pickerEntries: PropTypes.array.isRequired,
  onSelectItem: PropTypes.func,
  onOpenItem: PropTypes.func,
  textRenderer: PropTypes.func,
  iconRenderer: PropTypes.func,
  // eslint-disable-next-line react/boolean-prop-naming
  loading: PropTypes.bool.isRequired,
  classes: PropTypes.object.isRequired
};
PickerViewMaterial = withTheme()(withStyles(styles, {
  name: 'DxPickerViewMaterial'
})(PickerViewMaterial));
export { PickerViewMaterial };