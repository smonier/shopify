function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import { Button } from '@jahia/design-system-kit';
import React from 'react';
import PropTypes from 'prop-types';
import { Translation } from 'react-i18next';
import { toIconComponent } from './toIconComponent';
export var buttonRenderer = function buttonRenderer(buttonProps, showIcon, propagateEvent, upperCaseLabel) {
  var Render = function Render(_ref) {
    var context = _ref.context;
    return context.enabled !== false && /*#__PURE__*/React.createElement(Translation, {
      ns: context.buttonLabelNamespace
    }, function (t) {
      return /*#__PURE__*/React.createElement(Button, _extends({
        "data-sel-role": context.key,
        icon: showIcon && context.buttonIcon && toIconComponent(context.buttonIcon),
        onClick: function onClick(e) {
          if (!propagateEvent) {
            e.stopPropagation();
          }
          context.onClick(context, e);
        }
      }, buttonProps), /*#__PURE__*/React.createElement("span", {
        dangerouslySetInnerHTML: {
          __html: upperCaseLabel ? t(context.buttonLabel, context.buttonLabelParams).toUpperCase() : t(context.buttonLabel, context.buttonLabelParams)
        }
      }));
    });
  };
  Render.propTypes = {
    context: PropTypes.object.isRequired
  };
  return Render;
};