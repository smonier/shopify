{"version":3,"names":["_react","require","_client","_useNodeInfo","_getPermissionFragment","_getIsNodeTypeFragment","_useSchemaFields","_useNodeInfo2","_useMemoRequest3","_fastDeepEqual","_interopRequireDefault","_getSubNodesCountFragment","_excluded","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","getOwnPropertyDescriptors","defineProperties","defineProperty","queue","schemaResult","timeout","observedQueries","scheduleQueue","client","window","setTimeout","timeoutHandler","clearTimeout","mergedQueue","request","toInsert","variables","queryOptions","options","originals","mergeable","find","q","JSON","stringify","isSubset","merge","obs","unsubscribe","mergedRequest","query","generatedVariables","skip","r","getQuery","e","error","message","concat","setResult","loading","observableQuery","watchQuery","errorPolicy","subscription","subscribe","_ref","data","others","_objectWithoutProperties2","result","getResult","deepEquals","refetch","useNodeInfo","_useState","useState","_useState2","_slicedToArray2","useApolloClient","SCHEMA_FIELDS_QUERY","type","then","_ref2","_useMemoRequest","useMemoRequest","_useMemoRequest2","currentRequest","queryHasChanged","useEffect","splice","indexOf","fetchPolicy","infoQuery","res","readQuery","exports","node","jcr","nodeByPath","nodeById","nodes","nodesByPath","nodesById","decodeResult","map","n","nodeOrig","site","getPermissions","name","getEncodedPermissionName","getSitePermissions","getIsNodeTypes","getEncodedNodeTypeName","getMimeType","resourceChildren","mimeType","value","getSubNodesCount","_res$pageInfo","getEncodedSubNodesCountName","pageInfo","totalCount"],"sources":["useNodeInfo.ts"],"sourcesContent":["import {useEffect, useState} from 'react';\nimport {ApolloClient, ApolloError, NetworkStatus, useApolloClient, WatchQueryOptions} from '@apollo/client';\nimport {getQuery, NodeInfoOptions} from './useNodeInfo.gql-queries';\nimport {getEncodedPermissionName} from '../../fragments/getPermissionFragment';\nimport {getEncodedNodeTypeName} from '../../fragments/getIsNodeTypeFragment';\nimport {SCHEMA_FIELDS_QUERY} from '../useSchemaFields/useSchemaFields.gql-queries';\nimport {isSubset, merge} from './useNodeInfo.utils';\nimport {useMemoRequest} from './useMemoRequest';\nimport deepEquals from 'fast-deep-equal';\nimport {DocumentNode, GraphQLError} from 'graphql';\nimport {getEncodedSubNodesCountName} from '../../fragments/getSubNodesCountFragment';\n\nexport type Request = {\n    variables:{[key:string]: any},\n    options: NodeInfoOptions,\n    queryOptions: Partial<WatchQueryOptions>,\n}\n\nexport type QueuedRequest = Request & {\n    result?: any,\n    setResult: (data: any) => void\n}\n\nexport type MergedRequest = Request & { originals: QueuedRequest[] };\n\nexport type NodeInfoResult = {\n    node?: any,\n    nodes?: any[],\n    errors?: readonly GraphQLError[],\n    error?: ApolloError,\n    loading?: boolean,\n    networkStatus?: NetworkStatus,\n    partial?: boolean,\n    query?: DocumentNode,\n    variables?: {[key:string]: any}\n}\n\nconst queue: QueuedRequest[] = [];\nlet schemaResult: any;\nlet timeout: number;\nlet observedQueries: { unsubscribe: () => void }[] = [];\n\nfunction scheduleQueue(client: ApolloClient<object>) {\n    if (!timeout && schemaResult) {\n        timeout = window.setTimeout(() => {\n            timeoutHandler(client);\n            clearTimeout(timeout);\n            timeout = null;\n        }, 0);\n    }\n}\n\nconst timeoutHandler = (client: ApolloClient<object>) => {\n    const mergedQueue: MergedRequest[] = [];\n\n    queue.forEach(request => {\n        const toInsert = {\n            variables: request.variables,\n            queryOptions: request.queryOptions,\n            options: request.options,\n            originals: [request]\n        };\n\n        const mergeable = mergedQueue.find(q => JSON.stringify(q.queryOptions) === JSON.stringify(toInsert.queryOptions) && (isSubset(q.variables, toInsert.variables) || isSubset(toInsert.variables, q.variables)));\n\n        if (mergeable) {\n            merge(mergeable, toInsert);\n        } else {\n            mergedQueue.push({\n                variables: toInsert.variables && {...toInsert.variables},\n                queryOptions: toInsert.queryOptions && {...toInsert.queryOptions},\n                options: toInsert.options && {...toInsert.options},\n                originals: toInsert.originals\n            });\n        }\n    });\n\n    observedQueries.forEach(obs => obs.unsubscribe());\n    observedQueries = [];\n\n    mergedQueue.forEach(mergedRequest => {\n        const {variables, queryOptions, options, originals} = mergedRequest;\n        let query: any;\n        let generatedVariables: any;\n        let skip;\n\n        try {\n            const r = getQuery(variables, schemaResult, options);\n            query = r.query;\n            generatedVariables = r.generatedVariables;\n            skip = r.skip;\n        } catch (e) {\n            const error = {message: `One of the batched queries resulted in error: ${e.message}`} as ApolloError;\n            originals.forEach(request => {\n                request.setResult({\n                    loading: false,\n                    error\n                });\n            });\n        }\n\n        if (skip) {\n            // No query to execute\n            originals.forEach(request => {\n                request.setResult({\n                    loading: false\n                });\n            });\n        } else {\n            const observableQuery = client.watchQuery({query, errorPolicy: 'ignore', ...queryOptions, variables: generatedVariables});\n            const subscription = observableQuery.subscribe(({data, ...others}) => {\n                const result = getResult(data, others, options, query, generatedVariables);\n                originals.forEach(request => {\n                    if (!deepEquals(request.result, result)) {\n                        request.result = result;\n                        request.setResult({\n                            ...result,\n                            refetch() {\n                                return observableQuery.refetch(generatedVariables);\n                            }\n                        });\n                    }\n                });\n            });\n            observedQueries.push(subscription);\n        }\n    });\n};\n\nexport const useNodeInfo = (variables: {[key:string]: unknown}, options?: NodeInfoOptions, queryOptions?: Partial<WatchQueryOptions>) => {\n    const [result, setResult] = useState<NodeInfoResult>({\n        loading: true\n    });\n\n    const client = useApolloClient();\n\n    if (!schemaResult) {\n        client.query({query: SCHEMA_FIELDS_QUERY, variables: {type: 'GqlPublicationInfo'}}).then(({data}: {data: any}) => {\n            schemaResult = data;\n            scheduleQueue(client);\n        });\n    }\n\n    // Normalize and memoize request\n    const [currentRequest, queryHasChanged] = useMemoRequest(variables, queryOptions, options, setResult);\n    useEffect(() => {\n        queue.push(currentRequest);\n        scheduleQueue(client);\n\n        return () => {\n            queue.splice(queue.indexOf(currentRequest), 1);\n        };\n    }, [client, currentRequest]);\n\n    if (queryHasChanged && queryOptions?.fetchPolicy !== 'no-cache' && queryOptions?.fetchPolicy !== 'network-only') {\n        let infoQuery;\n\n        try {\n            infoQuery = getQuery(currentRequest.variables, schemaResult, currentRequest.options);\n        } catch (e) {\n            const error = {message: e.message} as ApolloError;\n            return {loading: false, error};\n        }\n\n        const res = client.readQuery({query: infoQuery.query, variables: infoQuery.generatedVariables});\n        if (res) {\n            const result = getResult(res, {}, currentRequest.options, infoQuery.query, infoQuery.generatedVariables);\n            setResult(result);\n            return result;\n        }\n    }\n\n    if (queryHasChanged && !result.loading) {\n        setResult({\n            loading: true\n        });\n        return {loading: true};\n    }\n\n    return result;\n};\n\nconst getResult = (data: any, others: NodeInfoResult, options: NodeInfoOptions, query: DocumentNode, generatedVariables: {[key:string]: unknown}) => {\n    const node: object = (data && data.jcr && (data.jcr.nodeByPath || data.jcr.nodeById)) || null;\n    const nodes: object[] = (data && data.jcr && (data.jcr.nodesByPath || data.jcr.nodesById)) || null;\n    let result = others;\n\n    if (node) {\n        result = {\n            node: decodeResult(node, options),\n            ...others,\n            query,\n            variables: generatedVariables\n        };\n    }\n\n    if (nodes) {\n        result = {\n            nodes: nodes.map(n => decodeResult(n, options)),\n            ...others,\n            query,\n            variables: generatedVariables\n        };\n    }\n\n    return result;\n};\n\nconst decodeResult = (nodeOrig: any, options: NodeInfoOptions) => {\n    const node = {...nodeOrig};\n    if (node.site) {\n        node.site = {...node.site};\n    }\n\n    if (node && options) {\n        if (options.getPermissions) {\n            options.getPermissions.forEach(name => {\n                const res = node[getEncodedPermissionName(name)];\n                delete node[getEncodedPermissionName(name)];\n                node[name] = res;\n            });\n        }\n\n        if (options.getSitePermissions) {\n            options.getSitePermissions.forEach(name => {\n                const res = node.site[getEncodedPermissionName(name)];\n                delete node.site[getEncodedPermissionName(name)];\n                node.site[name] = res;\n            });\n        }\n\n        if (options.getIsNodeTypes) {\n            options.getIsNodeTypes.forEach(name => {\n                const res = node[getEncodedNodeTypeName(name)];\n                delete node[getEncodedNodeTypeName(name)];\n                node[name] = res;\n            });\n        }\n\n        if (options.getMimeType) {\n            const {nodes} = node.resourceChildren;\n            node.mimeType = (nodes.length !== 0 && nodes[0].mimeType.value) || null;\n            delete node.resourceChildren;\n        }\n\n        if (options.getSubNodesCount) {\n            options.getSubNodesCount.forEach(name => {\n                const res = node[getEncodedSubNodesCountName(name)];\n                delete node[getEncodedSubNodesCountName(name)];\n                node['subNodesCount_' + name] = res?.pageInfo?.totalCount;\n            });\n        }\n    }\n\n    return node;\n};\n"],"mappings":"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"}