{"version":3,"names":["useEffect","useState","useApolloClient","getQuery","getEncodedPermissionName","getEncodedNodeTypeName","SCHEMA_FIELDS_QUERY","isSubset","merge","useMemoRequest","deepEquals","getEncodedSubNodesCountName","queue","schemaResult","timeout","observedQueries","scheduleQueue","client","window","setTimeout","timeoutHandler","clearTimeout","mergedQueue","forEach","request","toInsert","variables","queryOptions","options","originals","mergeable","find","q","JSON","stringify","push","_objectSpread","obs","unsubscribe","mergedRequest","query","generatedVariables","skip","r","e","error","message","concat","setResult","loading","observableQuery","watchQuery","errorPolicy","subscription","subscribe","_ref","data","others","_objectWithoutProperties","_excluded","result","getResult","refetch","useNodeInfo","_useState","_useState2","_slicedToArray","type","then","_ref2","_useMemoRequest","_useMemoRequest2","currentRequest","queryHasChanged","splice","indexOf","fetchPolicy","infoQuery","res","readQuery","node","jcr","nodeByPath","nodeById","nodes","nodesByPath","nodesById","decodeResult","map","n","nodeOrig","site","getPermissions","name","getSitePermissions","getIsNodeTypes","getMimeType","resourceChildren","mimeType","length","value","getSubNodesCount","_res$pageInfo","pageInfo","totalCount"],"sources":["useNodeInfo.ts"],"sourcesContent":["import {useEffect, useState} from 'react';\nimport {ApolloClient, ApolloError, NetworkStatus, useApolloClient, WatchQueryOptions} from '@apollo/client';\nimport {getQuery, NodeInfoOptions} from './useNodeInfo.gql-queries';\nimport {getEncodedPermissionName} from '../../fragments/getPermissionFragment';\nimport {getEncodedNodeTypeName} from '../../fragments/getIsNodeTypeFragment';\nimport {SCHEMA_FIELDS_QUERY} from '../useSchemaFields/useSchemaFields.gql-queries';\nimport {isSubset, merge} from './useNodeInfo.utils';\nimport {useMemoRequest} from './useMemoRequest';\nimport deepEquals from 'fast-deep-equal';\nimport {DocumentNode, GraphQLError} from 'graphql';\nimport {getEncodedSubNodesCountName} from '../../fragments/getSubNodesCountFragment';\n\nexport type Request = {\n    variables:{[key:string]: any},\n    options: NodeInfoOptions,\n    queryOptions: Partial<WatchQueryOptions>,\n}\n\nexport type QueuedRequest = Request & {\n    result?: any,\n    setResult: (data: any) => void\n}\n\nexport type MergedRequest = Request & { originals: QueuedRequest[] };\n\nexport type NodeInfoResult = {\n    node?: any,\n    nodes?: any[],\n    errors?: readonly GraphQLError[],\n    error?: ApolloError,\n    loading?: boolean,\n    networkStatus?: NetworkStatus,\n    partial?: boolean,\n    query?: DocumentNode,\n    variables?: {[key:string]: any}\n}\n\nconst queue: QueuedRequest[] = [];\nlet schemaResult: any;\nlet timeout: number;\nlet observedQueries: { unsubscribe: () => void }[] = [];\n\nfunction scheduleQueue(client: ApolloClient<object>) {\n    if (!timeout && schemaResult) {\n        timeout = window.setTimeout(() => {\n            timeoutHandler(client);\n            clearTimeout(timeout);\n            timeout = null;\n        }, 0);\n    }\n}\n\nconst timeoutHandler = (client: ApolloClient<object>) => {\n    const mergedQueue: MergedRequest[] = [];\n\n    queue.forEach(request => {\n        const toInsert = {\n            variables: request.variables,\n            queryOptions: request.queryOptions,\n            options: request.options,\n            originals: [request]\n        };\n\n        const mergeable = mergedQueue.find(q => JSON.stringify(q.queryOptions) === JSON.stringify(toInsert.queryOptions) && (isSubset(q.variables, toInsert.variables) || isSubset(toInsert.variables, q.variables)));\n\n        if (mergeable) {\n            merge(mergeable, toInsert);\n        } else {\n            mergedQueue.push({\n                variables: toInsert.variables && {...toInsert.variables},\n                queryOptions: toInsert.queryOptions && {...toInsert.queryOptions},\n                options: toInsert.options && {...toInsert.options},\n                originals: toInsert.originals\n            });\n        }\n    });\n\n    observedQueries.forEach(obs => obs.unsubscribe());\n    observedQueries = [];\n\n    mergedQueue.forEach(mergedRequest => {\n        const {variables, queryOptions, options, originals} = mergedRequest;\n        let query: any;\n        let generatedVariables: any;\n        let skip;\n\n        try {\n            const r = getQuery(variables, schemaResult, options);\n            query = r.query;\n            generatedVariables = r.generatedVariables;\n            skip = r.skip;\n        } catch (e) {\n            const error = {message: `One of the batched queries resulted in error: ${e.message}`} as ApolloError;\n            originals.forEach(request => {\n                request.setResult({\n                    loading: false,\n                    error\n                });\n            });\n        }\n\n        if (skip) {\n            // No query to execute\n            originals.forEach(request => {\n                request.setResult({\n                    loading: false\n                });\n            });\n        } else {\n            const observableQuery = client.watchQuery({query, errorPolicy: 'ignore', ...queryOptions, variables: generatedVariables});\n            const subscription = observableQuery.subscribe(({data, ...others}) => {\n                const result = getResult(data, others, options, query, generatedVariables);\n                originals.forEach(request => {\n                    if (!deepEquals(request.result, result)) {\n                        request.result = result;\n                        request.setResult({\n                            ...result,\n                            refetch() {\n                                return observableQuery.refetch(generatedVariables);\n                            }\n                        });\n                    }\n                });\n            });\n            observedQueries.push(subscription);\n        }\n    });\n};\n\nexport const useNodeInfo = (variables: {[key:string]: unknown}, options?: NodeInfoOptions, queryOptions?: Partial<WatchQueryOptions>) => {\n    const [result, setResult] = useState<NodeInfoResult>({\n        loading: true\n    });\n\n    const client = useApolloClient();\n\n    if (!schemaResult) {\n        client.query({query: SCHEMA_FIELDS_QUERY, variables: {type: 'GqlPublicationInfo'}}).then(({data}: {data: any}) => {\n            schemaResult = data;\n            scheduleQueue(client);\n        });\n    }\n\n    // Normalize and memoize request\n    const [currentRequest, queryHasChanged] = useMemoRequest(variables, queryOptions, options, setResult);\n    useEffect(() => {\n        queue.push(currentRequest);\n        scheduleQueue(client);\n\n        return () => {\n            queue.splice(queue.indexOf(currentRequest), 1);\n        };\n    }, [client, currentRequest]);\n\n    if (queryHasChanged && queryOptions?.fetchPolicy !== 'no-cache' && queryOptions?.fetchPolicy !== 'network-only') {\n        let infoQuery;\n\n        try {\n            infoQuery = getQuery(currentRequest.variables, schemaResult, currentRequest.options);\n        } catch (e) {\n            const error = {message: e.message} as ApolloError;\n            return {loading: false, error};\n        }\n\n        const res = client.readQuery({query: infoQuery.query, variables: infoQuery.generatedVariables});\n        if (res) {\n            const result = getResult(res, {}, currentRequest.options, infoQuery.query, infoQuery.generatedVariables);\n            setResult(result);\n            return result;\n        }\n    }\n\n    if (queryHasChanged && !result.loading) {\n        setResult({\n            loading: true\n        });\n        return {loading: true};\n    }\n\n    return result;\n};\n\nconst getResult = (data: any, others: NodeInfoResult, options: NodeInfoOptions, query: DocumentNode, generatedVariables: {[key:string]: unknown}) => {\n    const node: object = (data && data.jcr && (data.jcr.nodeByPath || data.jcr.nodeById)) || null;\n    const nodes: object[] = (data && data.jcr && (data.jcr.nodesByPath || data.jcr.nodesById)) || null;\n    let result = others;\n\n    if (node) {\n        result = {\n            node: decodeResult(node, options),\n            ...others,\n            query,\n            variables: generatedVariables\n        };\n    }\n\n    if (nodes) {\n        result = {\n            nodes: nodes.map(n => decodeResult(n, options)),\n            ...others,\n            query,\n            variables: generatedVariables\n        };\n    }\n\n    return result;\n};\n\nconst decodeResult = (nodeOrig: any, options: NodeInfoOptions) => {\n    const node = {...nodeOrig};\n    if (node.site) {\n        node.site = {...node.site};\n    }\n\n    if (node && options) {\n        if (options.getPermissions) {\n            options.getPermissions.forEach(name => {\n                const res = node[getEncodedPermissionName(name)];\n                delete node[getEncodedPermissionName(name)];\n                node[name] = res;\n            });\n        }\n\n        if (options.getSitePermissions) {\n            options.getSitePermissions.forEach(name => {\n                const res = node.site[getEncodedPermissionName(name)];\n                delete node.site[getEncodedPermissionName(name)];\n                node.site[name] = res;\n            });\n        }\n\n        if (options.getIsNodeTypes) {\n            options.getIsNodeTypes.forEach(name => {\n                const res = node[getEncodedNodeTypeName(name)];\n                delete node[getEncodedNodeTypeName(name)];\n                node[name] = res;\n            });\n        }\n\n        if (options.getMimeType) {\n            const {nodes} = node.resourceChildren;\n            node.mimeType = (nodes.length !== 0 && nodes[0].mimeType.value) || null;\n            delete node.resourceChildren;\n        }\n\n        if (options.getSubNodesCount) {\n            options.getSubNodesCount.forEach(name => {\n                const res = node[getEncodedSubNodesCountName(name)];\n                delete node[getEncodedSubNodesCountName(name)];\n                node['subNodesCount_' + name] = res?.pageInfo?.totalCount;\n            });\n        }\n    }\n\n    return node;\n};\n"],"mappings":"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"}