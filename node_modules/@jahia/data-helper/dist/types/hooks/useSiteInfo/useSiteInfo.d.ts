export declare const useSiteInfo: ({ siteKey, displayLanguage, uiLanguage }: {
    siteKey: string;
    displayLanguage: string;
    uiLanguage: string;
}) => {
    siteInfo: any;
    client: import("@apollo/client").ApolloClient<any>;
    observable: import("@apollo/client").ObservableQuery<any, {
        path: string;
        displayLanguage: string;
        skipUILanguage: boolean;
        uiLanguage: string;
    }>;
    data: any;
    previousData?: any;
    error?: import("@apollo/client").ApolloError;
    loading: boolean;
    networkStatus: import("@apollo/client").NetworkStatus;
    called: boolean;
    variables: {
        path: string;
        displayLanguage: string;
        skipUILanguage: boolean;
        uiLanguage: string;
    };
    startPolling: (pollInterval: number) => void;
    stopPolling: () => void;
    subscribeToMore: <TSubscriptionData = any, TSubscriptionVariables extends import("@apollo/client").OperationVariables = {
        path: string;
        displayLanguage: string;
        skipUILanguage: boolean;
        uiLanguage: string;
    }>(options: import("@apollo/client").SubscribeToMoreOptions<any, TSubscriptionVariables, TSubscriptionData>) => () => void;
    updateQuery: <TVars extends import("@apollo/client").OperationVariables = {
        path: string;
        displayLanguage: string;
        skipUILanguage: boolean;
        uiLanguage: string;
    }>(mapFn: (previousQueryResult: any, options: Pick<import("@apollo/client").WatchQueryOptions<TVars, any>, "variables">) => any) => void;
    refetch: (variables?: Partial<{
        path: string;
        displayLanguage: string;
        skipUILanguage: boolean;
        uiLanguage: string;
    }>) => Promise<import("@apollo/client").ApolloQueryResult<any>>;
    reobserve: (newOptions?: Partial<import("@apollo/client").WatchQueryOptions<{
        path: string;
        displayLanguage: string;
        skipUILanguage: boolean;
        uiLanguage: string;
    }, any>>, newNetworkStatus?: import("@apollo/client").NetworkStatus) => Promise<import("@apollo/client").ApolloQueryResult<any>>;
    fetchMore: <TFetchData = any, TFetchVars extends import("@apollo/client").OperationVariables = {
        path: string;
        displayLanguage: string;
        skipUILanguage: boolean;
        uiLanguage: string;
    }>(fetchMoreOptions: import("@apollo/client").FetchMoreQueryOptions<TFetchVars, TFetchData> & {
        updateQuery?: (previousQueryResult: any, options: {
            fetchMoreResult: TFetchData;
            variables: TFetchVars;
        }) => any;
    }) => Promise<import("@apollo/client").ApolloQueryResult<TFetchData>>;
};
