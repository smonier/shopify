{"version":3,"sources":["Input.tsx"],"names":["React","useEffect","useRef","clsx","Cancel","Search","InputSizes","InputVariants","Input","variant","value","id","placeholder","isDisabled","isReadOnly","className","size","Default","icon","onClear","onChange","onBlur","onFocus","focusOnField","props","classNameProps","Big","inputFilled","inputEmpty","searchRef","current","focus","preventScroll","displayName"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef} from 'react';\nimport clsx from 'clsx';\nimport {Cancel, Search} from '~/icons';\nimport './Input.scss';\nimport {InputProps, InputSizes, InputVariants} from './Input.types';\n\nexport const Input: React.FC<InputProps> = ({\n                                                variant = 'text',\n                                                value = '',\n                                                id,\n                                                placeholder,\n                                                isDisabled = false,\n                                                isReadOnly = false,\n                                                className,\n                                                size = InputSizes.Default,\n                                                icon,\n                                                onClear,\n                                                onChange,\n                                                onBlur,\n                                                onFocus,\n                                                focusOnField = false,\n                                                ...props\n                                            }) => {\n    const classNameProps = clsx(\n        'moonstone-input',\n        {'moonstone-size_big': size === InputSizes.Big},\n        {'moonstone-disabled': isDisabled},\n        className\n    );\n    const inputFilled = value !== '';\n    const inputEmpty = value === '';\n    const searchRef = useRef(null);\n\n    useEffect(() => {\n        if (focusOnField) {\n            searchRef.current.focus({preventScroll: true});\n        }\n    }, [focusOnField]);\n\n    return (\n        <div className={classNameProps}>\n            <input\n                className={\n                    clsx(\n                        'moonstone-input-element',\n                        {'start-icon-padding': icon || variant === InputVariants.Search},\n                        {'end-icon-padding': onClear}\n                    )\n                }\n                type=\"text\"\n                value={value}\n                id={id}\n                placeholder={placeholder}\n                disabled={isDisabled}\n                readOnly={isReadOnly}\n                onChange={onChange}\n                onBlur={onBlur}\n                onFocus={onFocus}\n                ref={searchRef}\n\n                {...props}\n            />\n            {(icon || variant === InputVariants.Search) && (\n                <div\n                    className={clsx(\n                        'start-icon-wrap',\n                        'flexRow_nowrap',\n                        'alignCenter',\n                        {'icon_input-filled': inputFilled},\n                        {'icon_input-empty': inputEmpty}\n                    )}\n                >\n                    {variant === InputVariants.Search\n                        ? <Search focusable=\"false\"/>\n                        : <icon.type {...icon.props} focusable=\"false\"/>\n                    }\n                </div>\n            )}\n            {onClear && inputFilled && !isDisabled && !isReadOnly && (\n                <div className=\"end-icon-wrap flexRow_center alignCenter\" onClick={onClear}>\n                    <Cancel/>\n                </div>\n            )}\n        </div>\n    );\n};\n\nInput.displayName = 'Input';\n"]}