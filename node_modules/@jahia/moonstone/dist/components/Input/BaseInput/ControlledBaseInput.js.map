{"version":3,"sources":["ControlledBaseInput.tsx"],"names":["React","useEffect","useRef","clsx","Cancel","Button","ControlledBaseInput","value","searchContext","id","role","placeholder","isDisabled","isReadOnly","className","size","icon","isShowClearButton","onClear","onChange","onBlur","onFocus","focusOnField","props","hasSearchContext","isFilled","inputRef","classNameProps","current","focus","preventScroll","inputEvent","Event","dispatchEvent","displayName"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,MAA1B,QAAuC,OAAvC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAAQC,MAAR;AACA,SAAQC,MAAR;AACA;AAGA,OAAO,IAAMC,mBAAsF,GAAG,SAAzFA,mBAAyF,OAkBhG;AAAA,wBAjBFC,KAiBE;AAAA,MAjBFA,KAiBE,2BAjBM,EAiBN;AAAA,MAhBFC,aAgBE,QAhBFA,aAgBE;AAAA,MAfFC,EAeE,QAfFA,EAeE;AAAA,MAdFC,IAcE,QAdFA,IAcE;AAAA,MAbFC,WAaE,QAbFA,WAaE;AAAA,6BAZFC,UAYE;AAAA,MAZFA,UAYE,gCAZW,KAYX;AAAA,6BAXFC,UAWE;AAAA,MAXFA,UAWE,gCAXW,KAWX;AAAA,MAVFC,SAUE,QAVFA,SAUE;AAAA,uBATFC,IASE;AAAA,MATFA,IASE,0BATK,SASL;AAAA,MARFC,IAQE,QARFA,IAQE;AAAA,MAPFC,iBAOE,QAPFA,iBAOE;AAAA,MANFC,OAME,QANFA,OAME;AAAA,MALFC,QAKE,QALFA,QAKE;AAAA,MAJFC,MAIE,QAJFA,MAIE;AAAA,MAHFC,OAGE,QAHFA,OAGE;AAAA,+BAFFC,YAEE;AAAA,MAFFA,YAEE,kCAFa,KAEb;AAAA,MADCC,KACD;;AACF,MAAMC,gBAAgB,GAAG,OAAOhB,aAAP,KAAyB,WAAlD;AACA,MAAMiB,QAAQ,GAAGlB,KAAK,KAAK,EAA3B;AACA,MAAMmB,QAAQ,GAAGxB,MAAM,CAAC,IAAD,CAAvB;AACA,MAAMyB,cAAc,GAAGxB,IAAI,CACvB,qBADuB,EAEvB;AAAC,+BAA2BY,IAAI,KAAK;AAArC,GAFuB,EAGvBD,SAHuB,CAA3B;AAMAb,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIqB,YAAJ,EAAkB;AACdI,MAAAA,QAAQ,CAACE,OAAT,CAAiBC,KAAjB,CAAuB;AAACC,QAAAA,aAAa,EAAE;AAAhB,OAAvB;AACH;AACJ,GAJQ,EAIN,CAACR,YAAD,CAJM,CAAT;;AAMA,MAAIL,iBAAiB,IAAI,CAACC,OAA1B,EAAmC;AAC/BA,IAAAA,OAAO,GAAG,mBAAM;AACZQ,MAAAA,QAAQ,CAACE,OAAT,CAAiBrB,KAAjB,GAAyB,EAAzB;AACA,UAAMwB,UAAmB,GAAG,IAAIC,KAAJ,CAAU,QAAV,CAA5B;AACAN,MAAAA,QAAQ,CAACE,OAAT,CAAiBK,aAAjB,CAA+BF,UAA/B;AACAZ,MAAAA,QAAQ,CAACY,UAAD,CAAR;AACH,KALD;AAMH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAEJ;AAAhB,KACKH,gBAAgB,iBAET,uDACI,oBAAC,aAAD,CAAe,IAAf,eACQhB,aAAa,CAACe,KADtB;AAEI,IAAA,OAAO,EAAC,OAFZ;AAGI,IAAA,IAAI,EAAC,OAHT;AAII,IAAA,QAAQ,EAAC,OAJb;AAKI,IAAA,SAAS,EAAEpB,IAAI,CAACK,aAAa,CAACe,KAAd,CAAoBT,SAArB,EAAgC,iCAAhC;AALnB,KADJ,CAHZ,eAaI;AACI,IAAA,GAAG,EAAEY,QADT;AAEI,IAAA,SAAS,EACLvB,IAAI,CACA,6BADA,EAEA;AACI,6CAAuCa,IAD3C;AAEI,iDAA2CQ,gBAF/C;AAGI,oDAA8CN;AAHlD,KAFA,CAHZ;AAYI,IAAA,IAAI,EAAC,MAZT;AAaI,IAAA,IAAI,EAAER,IAbV;AAcI,IAAA,KAAK,EAAEH,KAdX;AAeI,IAAA,EAAE,EAAEE,EAfR;AAgBI,IAAA,WAAW,EAAEE,WAhBjB;AAiBI,IAAA,QAAQ,EAAEC,UAjBd;AAkBI,IAAA,QAAQ,EAAEC,UAlBd;AAmBI,IAAA,QAAQ,EAAEM,QAnBd;AAoBI,IAAA,MAAM,EAAEC,MApBZ;AAqBI,IAAA,OAAO,EAAEC;AArBb,KAsBQE,KAtBR,EAbJ,EAqCKP,IAAI,iBACD;AACI,IAAA,SAAS,EAAEb,IAAI,CACX,0BADW,EAEX,gBAFW,EAGX,aAHW;AADnB,kBAOI,oBAAC,IAAD,CAAM,IAAN,eAAea,IAAI,CAACO,KAApB;AAA2B,IAAA,SAAS,EAAC;AAArC,KAPJ,CAtCR,EAgDKL,OAAO,IAAIO,QAAX,IAAuB,CAACb,UAAxB,IAAsC,CAACC,UAAvC,iBACG,oBAAC,MAAD;AACI,IAAA,SAAS,EAAC,4DADd;AAEI,IAAA,OAAO,EAAC,OAFZ;AAGI,IAAA,IAAI,eAAE,oBAAC,MAAD,OAHV;AAII,kBAAW,OAJf;AAKI,IAAA,OAAO,EAAEK;AALb,IAjDR,CADJ;AA4DH,CAvGM;AAyGPZ,mBAAmB,CAAC4B,WAApB,GAAkC,qBAAlC","sourcesContent":["import React, {useEffect, useRef} from 'react';\nimport clsx from 'clsx';\nimport {Cancel} from '~/icons';\nimport {Button} from '~/components';\nimport './BaseInput.scss';\nimport {BaseInputProps} from './BaseInput.types';\n\nexport const ControlledBaseInput: React.FC<BaseInputProps & { searchContext?: React.ReactElement }> = ({\n    value = '',\n    searchContext,\n    id,\n    role,\n    placeholder,\n    isDisabled = false,\n    isReadOnly = false,\n    className,\n    size = 'default',\n    icon,\n    isShowClearButton,\n    onClear,\n    onChange,\n    onBlur,\n    onFocus,\n    focusOnField = false,\n    ...props\n}) => {\n    const hasSearchContext = typeof searchContext !== 'undefined';\n    const isFilled = value !== '';\n    const inputRef = useRef(null);\n    const classNameProps = clsx(\n        'moonstone-baseInput',\n        {'moonstone-baseInput_big': size === 'big'},\n        className\n    );\n\n    useEffect(() => {\n        if (focusOnField) {\n            inputRef.current.focus({preventScroll: true});\n        }\n    }, [focusOnField]);\n\n    if (isShowClearButton && !onClear) {\n        onClear = () => {\n            inputRef.current.value = '';\n            const inputEvent: unknown = new Event('change');\n            inputRef.current.dispatchEvent(inputEvent);\n            onChange(inputEvent as React.ChangeEvent<HTMLInputElement>);\n        };\n    }\n\n    return (\n        <div className={classNameProps}>\n            {hasSearchContext &&\n                (\n                    <>\n                        <searchContext.type\n                            {...searchContext.props}\n                            variant=\"ghost\"\n                            size=\"small\"\n                            maxWidth=\"100px\"\n                            className={clsx(searchContext.props.className, 'moonstone-searchContext-element')}\n                        />\n                    </>\n                )}\n            <input\n                ref={inputRef}\n                className={\n                    clsx(\n                        'moonstone-baseInput-element',\n                        {\n                            'moonstone-baseInput-element_hasIcon': icon,\n                            'moonstone-baseInput-element-withContext': hasSearchContext,\n                            'moonstone-baseInput-element_hasClearButton': onClear\n                        }\n                    )\n                }\n                type=\"text\"\n                role={role}\n                value={value}\n                id={id}\n                placeholder={placeholder}\n                disabled={isDisabled}\n                readOnly={isReadOnly}\n                onChange={onChange}\n                onBlur={onBlur}\n                onFocus={onFocus}\n                {...props}\n            />\n            {icon && (\n                <div\n                    className={clsx(\n                        'moonstone-baseInput_icon',\n                        'flexRow_nowrap',\n                        'alignCenter'\n                    )}\n                >\n                    <icon.type {...icon.props} focusable=\"false\"/>\n                </div>\n            )}\n            {onClear && isFilled && !isDisabled && !isReadOnly && (\n                <Button\n                    className=\"moonstone-baseInput_clearButton flexRow_center alignCenter\"\n                    variant=\"ghost\"\n                    icon={<Cancel/>}\n                    aria-label=\"Reset\"\n                    onClick={onClear}\n                />\n            )}\n        </div>\n    );\n};\n\nControlledBaseInput.displayName = 'ControlledBaseInput';\n"]}