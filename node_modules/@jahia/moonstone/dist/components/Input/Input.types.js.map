{"version":3,"sources":["Input.types.ts"],"names":["InputVariants","InputSizes"],"mappings":"AAGA,WAAYA,aAAZ;;WAAYA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;GAAAA,a,KAAAA,a;;AAMZ,WAAYC,UAAZ;;WAAYA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;GAAAA,U,KAAAA,U","sourcesContent":["import React from 'react';\n\ntype InputVariant = 'text' | 'search';\nexport enum InputVariants {\n    Text = 'text',\n    Search = 'search'\n}\n\ntype InputSize = 'default' | 'big';\nexport enum InputSizes {\n    Default = 'default',\n    Big = 'big'\n}\n\nexport type InputProps = {\n    /**\n     * Variant of the input to use\n     */\n    variant?: InputVariant;\n    /**\n     * Value to exist in the input field\n     */\n    value?: string;\n    /**\n     * ID of the input\n     */\n    id?: string,\n    /**\n     * Initial placeholder text to appear in the input field\n     */\n    placeholder?: string;\n    /**\n     * Whether the input should be disabled\n     */\n    isDisabled?: boolean;\n    /**\n     * Whether the input should be read-only. It's still submittable.\n     */\n    isReadOnly?: boolean;\n    /**\n     * Whether the input should be focused when displayed.\n     */\n    focusOnField?: boolean;\n    /**\n     * Any additional custom classes to apply to the component\n     */\n    className?: string;\n    /**\n     * Whether the size of the input should be default or big\n     */\n    size?: InputSize;\n    /**\n     * Which icon to use at the beginning of the input\n     */\n    icon?: React.ReactElement;\n    /**\n     * Function - when passed in, the Cancel icon appears at the end of the input and its click event is passed back when the Cancel icon is clicked\n     */\n    onClear?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n    /**\n     * Function triggered on change of the input value\n     */\n    onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n    /**\n     * Function triggered on blur of the input (i.e., focussing away from the input)\n     */\n    onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void;\n    /**\n     * Function triggered on focus of the input\n     */\n    onFocus?: (event: React.FocusEvent<HTMLInputElement>) => void;\n}\n"]}