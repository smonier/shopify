import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import React, { useEffect, useRef } from 'react';
import clsx from 'clsx';
import { Cancel, Search } from "../../icons";
import "./Input.css";
import { InputSizes, InputVariants } from "./Input.types";
export var Input = function Input(_ref) {
  var _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? 'text' : _ref$variant,
      _ref$value = _ref.value,
      value = _ref$value === void 0 ? '' : _ref$value,
      id = _ref.id,
      placeholder = _ref.placeholder,
      _ref$isDisabled = _ref.isDisabled,
      isDisabled = _ref$isDisabled === void 0 ? false : _ref$isDisabled,
      _ref$isReadOnly = _ref.isReadOnly,
      isReadOnly = _ref$isReadOnly === void 0 ? false : _ref$isReadOnly,
      className = _ref.className,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? InputSizes.Default : _ref$size,
      icon = _ref.icon,
      onClear = _ref.onClear,
      onChange = _ref.onChange,
      onBlur = _ref.onBlur,
      onFocus = _ref.onFocus,
      _ref$focusOnField = _ref.focusOnField,
      focusOnField = _ref$focusOnField === void 0 ? false : _ref$focusOnField,
      props = _objectWithoutProperties(_ref, ["variant", "value", "id", "placeholder", "isDisabled", "isReadOnly", "className", "size", "icon", "onClear", "onChange", "onBlur", "onFocus", "focusOnField"]);

  var classNameProps = clsx('moonstone-input', {
    'moonstone-size_big': size === InputSizes.Big
  }, {
    'moonstone-disabled': isDisabled
  }, className);
  var inputFilled = value !== '';
  var inputEmpty = value === '';
  var searchRef = useRef(null);
  useEffect(function () {
    if (focusOnField) {
      searchRef.current.focus({
        preventScroll: true
      });
    }
  }, [focusOnField]);
  return /*#__PURE__*/React.createElement("div", {
    className: classNameProps
  }, /*#__PURE__*/React.createElement("input", _extends({
    className: clsx('moonstone-input-element', {
      'start-icon-padding': icon || variant === InputVariants.Search
    }, {
      'end-icon-padding': onClear
    }),
    type: "text",
    value: value,
    id: id,
    placeholder: placeholder,
    disabled: isDisabled,
    readOnly: isReadOnly,
    onChange: onChange,
    onBlur: onBlur,
    onFocus: onFocus,
    ref: searchRef
  }, props)), (icon || variant === InputVariants.Search) && /*#__PURE__*/React.createElement("div", {
    className: clsx('start-icon-wrap', 'flexRow_nowrap', 'alignCenter', {
      'icon_input-filled': inputFilled
    }, {
      'icon_input-empty': inputEmpty
    })
  }, variant === InputVariants.Search ? /*#__PURE__*/React.createElement(Search, {
    focusable: "false"
  }) : /*#__PURE__*/React.createElement(icon.type, _extends({}, icon.props, {
    focusable: "false"
  }))), onClear && inputFilled && !isDisabled && !isReadOnly && /*#__PURE__*/React.createElement("div", {
    className: "end-icon-wrap flexRow_center alignCenter",
    onClick: onClear
  }, /*#__PURE__*/React.createElement(Cancel, null)));
};
Input.displayName = 'Input';
//# sourceMappingURL=Input.js.map
