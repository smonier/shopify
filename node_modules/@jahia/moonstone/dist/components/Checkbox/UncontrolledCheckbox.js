import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import React from 'react';
import clsx from 'clsx';
import { useFocusRing } from '@react-aria/focus';
import { capitalize } from "../../utils/helpers";
import "./Checkbox.css";
export var UncontrolledCheckbox = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var className = props.className,
      indeterminate = props.indeterminate,
      checked = props.checked,
      _props$size = props.size,
      size = _props$size === void 0 ? 'default' : _props$size,
      otherProps = _objectWithoutProperties(props, ["className", "indeterminate", "checked", "size"]);

  var defaultRef = React.useRef(null);
  var resolvedRef = ref || defaultRef;
  var ariaCheckedValue = 'false';

  var _useFocusRing = useFocusRing(),
      isFocusVisible = _useFocusRing.isFocusVisible,
      focusProps = _useFocusRing.focusProps;

  if (indeterminate) {
    ariaCheckedValue = 'mixed';
  } else if (checked) {
    ariaCheckedValue = 'true';
  }

  React.useEffect(function () {
    resolvedRef.current.indeterminate = indeterminate;
  }, [resolvedRef, indeterminate]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: clsx('moonstone-checkbox', className)
  }, /*#__PURE__*/React.createElement("input", _extends({
    type: "checkbox",
    className: clsx('moonstone-checkbox_input', "moonstone-checkbox_size".concat(capitalize(size)), {
      'hasFocus': isFocusVisible
    }),
    ref: resolvedRef,
    "aria-checked": ariaCheckedValue
  }, otherProps, focusProps)), /*#__PURE__*/React.createElement("svg", {
    className: clsx('moonstone-checkbox_icon', "moonstone-checkbox_size".concat(capitalize(size))),
    viewBox: "0 0 21 21"
  }, indeterminate ? /*#__PURE__*/React.createElement("path", {
    d: "M4.5 10.5L16.5 10.5",
    strokeLinecap: "round"
  }) : /*#__PURE__*/React.createElement("path", {
    d: "M5 10.75L8.5 14.25L16 6",
    strokeLinecap: "round"
  }))));
});
UncontrolledCheckbox.displayName = 'UncontrolledCheckbox';
//# sourceMappingURL=UncontrolledCheckbox.js.map
