import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
import clsx from 'clsx';
import { useCheckbox } from '@react-aria/checkbox';
import { useToggleState } from '@react-stately/toggle';
import { useFocusRing } from '@react-aria/focus';
import { capitalize } from "../../utils/helpers";
import "./Checkbox.css";
export var ControlledCheckbox = function ControlledCheckbox(props) {
  var className = props.className,
      _props$isIndeterminat = props.isIndeterminate,
      isIndeterminate = _props$isIndeterminat === void 0 ? false : _props$isIndeterminat,
      _props$size = props.size,
      size = _props$size === void 0 ? 'default' : _props$size;
  var inputRef = React.useRef(null);

  var _useCheckbox = useCheckbox(props, useToggleState(props), inputRef),
      inputProps = _useCheckbox.inputProps;

  var _useFocusRing = useFocusRing(),
      isFocusVisible = _useFocusRing.isFocusVisible,
      focusProps = _useFocusRing.focusProps;

  return /*#__PURE__*/React.createElement("div", {
    className: clsx('moonstone-checkbox', className)
  }, /*#__PURE__*/React.createElement("input", _extends({
    className: clsx('moonstone-checkbox_input', "moonstone-checkbox_size".concat(capitalize(size)), {
      'hasFocus': isFocusVisible
    }),
    ref: inputRef
  }, inputProps, focusProps)), /*#__PURE__*/React.createElement("svg", {
    className: clsx('moonstone-checkbox_icon', "moonstone-checkbox_size".concat(capitalize(size))),
    viewBox: "0 0 21 21"
  }, isIndeterminate ? /*#__PURE__*/React.createElement("path", {
    d: "M4.5 10.5L16.5 10.5",
    strokeLinecap: "round"
  }) : /*#__PURE__*/React.createElement("path", {
    d: "M5 10.75L8.5 14.25L16 6",
    strokeLinecap: "round"
  })));
};
ControlledCheckbox.displayName = 'ControlledCheckbox';
//# sourceMappingURL=ControlledCheckbox.js.map
