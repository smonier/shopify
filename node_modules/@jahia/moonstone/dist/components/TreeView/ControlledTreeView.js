import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import React from 'react';
import clsx from 'clsx';
import "./TreeView.css";
import Loading from "../../icons/Loading";
import ChevronDown from "../../icons/ChevronDown";
import ChevronRight from "../../icons/ChevronRight";
import { Typography } from "../Typography";
export var ControlledTreeView = function ControlledTreeView(_ref) {
  var data = _ref.data,
      _ref$openedItems = _ref.openedItems,
      openedItems = _ref$openedItems === void 0 ? [] : _ref$openedItems,
      _ref$selectedItems = _ref.selectedItems,
      selectedItems = _ref$selectedItems === void 0 ? [] : _ref$selectedItems,
      _ref$onClickItem = _ref.onClickItem,
      onClickItem = _ref$onClickItem === void 0 ? function () {
    return undefined;
  } : _ref$onClickItem,
      _ref$onDoubleClickIte = _ref.onDoubleClickItem,
      onDoubleClickItem = _ref$onDoubleClickIte === void 0 ? function () {
    return undefined;
  } : _ref$onDoubleClickIte,
      _ref$onContextMenuIte = _ref.onContextMenuItem,
      onContextMenuItem = _ref$onContextMenuIte === void 0 ? function () {
    return undefined;
  } : _ref$onContextMenuIte,
      _ref$onOpenItem = _ref.onOpenItem,
      onOpenItem = _ref$onOpenItem === void 0 ? function () {
    return undefined;
  } : _ref$onOpenItem,
      _ref$onCloseItem = _ref.onCloseItem,
      onCloseItem = _ref$onCloseItem === void 0 ? function () {
    return undefined;
  } : _ref$onCloseItem,
      _ref$isReversed = _ref.isReversed,
      isReversed = _ref$isReversed === void 0 ? false : _ref$isReversed,
      props = _objectWithoutProperties(_ref, ["data", "openedItems", "selectedItems", "onClickItem", "onDoubleClickItem", "onContextMenuItem", "onOpenItem", "onCloseItem", "isReversed"]);

  var isFlatData = data.filter(function (item) {
    return item.children && item.children.length > 0;
  }).length === 0; // TODO: Shadowed variables `deep` and `isFlatData` need to be renamed
  // tslint:disable-next-line:no-shadowed-variable

  function generateLevelJSX(data, deep, parentHasIconStart, isFlatData) {
    return data.map(function (node) {
      var hasChild = Boolean(node.hasChildren || node.children && node.children.length !== 0);
      var hasIconStart = Boolean(node.iconStart);
      var isClosable = Boolean(node.isClosable !== false);
      var isOpen = Boolean(openedItems.includes(node.id)) || !isClosable;
      var isLoading = Boolean(node.isLoading);
      var isSelected = Boolean(selectedItems.includes(node.id)); // ---
      // Manage clicks events
      // ---

      var toggleNode = function toggleNode(e) {
        if (isOpen) {
          onCloseItem(node, e);
        } else {
          onOpenItem(node, e);
        }
      };

      var handleNodeClick = function handleNodeClick(e) {
        if (onClickItem.length === 0) {
          toggleNode(e);
        }

        onClickItem(node, e, toggleNode);
      };

      var handleNodeDoubleClick = function handleNodeDoubleClick(e) {
        onDoubleClickItem(node, e);
      };

      var handleNodeContextMenu = function handleNodeContextMenu(e) {
        onContextMenuItem(node, e);
      }; // ---
      // Define CSS treeView_item classes
      // ---


      var cssTreeViewItem = clsx('flexRow_between', 'alignCenter', 'moonstone-treeView_item', {
        'moonstone-selected': isSelected,
        'moonstone-reversed': isReversed
      }); // Manage treeView_item's icon
      // TODO: Shadowed variable `parentHasIconStart` needs to be renamed
      // tslint:disable-next-line:no-shadowed-variable

      var displayIcon = function displayIcon(icon, size, className) {
        var parentHasIconStart = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

        if (!icon && !parentHasIconStart) {
          return;
        }

        return /*#__PURE__*/React.createElement("i", {
          className: clsx('flexRow', 'alignCenter', className)
        }, icon && /*#__PURE__*/React.createElement(icon.type, _extends({}, icon.props, {
          size: size
        })));
      }; // Manage if we display icon or loading


      var displayIconOrLoading = function displayIconOrLoading(icon) {
        var i = isLoading ? /*#__PURE__*/React.createElement(Loading, {
          size: "big",
          className: "moonstone-icon_isLoading"
        }) : icon;
        return displayIcon(i, 'default', 'moonstone-treeView_itemIconEnd');
      }; // TreeItem has child


      return /*#__PURE__*/React.createElement(React.Fragment, {
        key: "".concat(deep, "-").concat(node.id)
      }, /*#__PURE__*/React.createElement("li", _extends({
        role: "treeitem",
        "aria-expanded": isOpen
      }, node.treeItemProps), /*#__PURE__*/React.createElement("div", {
        className: cssTreeViewItem,
        style: {
          paddingLeft: "calc((var(--spacing-medium) + var(--spacing-nano)) * ".concat(deep, " + var(--spacing-medium))")
        }
      }, isClosable && hasChild && /*#__PURE__*/React.createElement("div", {
        className: clsx('flexRow', 'alignCenter', 'moonstone-treeView_itemToggle'),
        onClick: toggleNode
      }, isOpen ? /*#__PURE__*/React.createElement(ChevronDown, null) : /*#__PURE__*/React.createElement(ChevronRight, null)), !isFlatData && !hasChild && /*#__PURE__*/React.createElement("div", {
        className: clsx('flexRow', 'alignCenter', 'moonstone-treeView_itemToggle')
      }), /*#__PURE__*/React.createElement("div", {
        className: clsx('flexRow_nowrap', 'alignCenter', 'flexFluid', 'moonstone-treeView_itemLabel', node.className),
        onClick: handleNodeClick,
        onDoubleClick: handleNodeDoubleClick,
        onContextMenu: handleNodeContextMenu
      }, displayIcon(node.iconStart, 'small', 'moonstone-treeView_itemIconStart', parentHasIconStart), /*#__PURE__*/React.createElement(Typography, _extends({
        isNowrap: true,
        className: clsx('flexFluid'),
        component: "span",
        variant: "body"
      }, node.typographyOptions), node.label), displayIconOrLoading(node.iconEnd)))), isOpen && node.children && generateLevelJSX(node.children, isClosable ? deep + 1 : deep, hasIconStart, isFlatData));
    });
  } // TreeView component


  return /*#__PURE__*/React.createElement("ul", _extends({
    role: "tree"
  }, props), generateLevelJSX(data, 0, false, isFlatData));
};
//# sourceMappingURL=ControlledTreeView.js.map
