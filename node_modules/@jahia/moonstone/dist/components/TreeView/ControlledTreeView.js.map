{"version":3,"sources":["ControlledTreeView.tsx"],"names":["React","clsx","Loading","ChevronDown","ChevronRight","Typography","ControlledTreeView","data","openedItems","selectedItems","onClickItem","undefined","onDoubleClickItem","onContextMenuItem","onOpenItem","onCloseItem","isReversed","props","isFlatData","filter","item","children","length","generateLevelJSX","deep","parentHasIconStart","map","node","hasChild","Boolean","hasChildren","hasIconStart","iconStart","isClosable","isOpen","includes","id","isLoading","isSelected","toggleNode","e","handleNodeClick","handleNodeDoubleClick","handleNodeContextMenu","cssTreeViewItem","displayIcon","icon","size","className","displayIconOrLoading","i","treeItemProps","paddingLeft","typographyOptions","label","iconEnd"],"mappings":"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","sourcesContent":["import React from 'react';\nimport clsx from 'clsx';\nimport './TreeView.scss';\nimport {ControlledTreeViewProps} from './ControlledTreeView.types';\nimport {TreeViewData} from './TreeView.types';\nimport Loading from '~/icons/Loading';\nimport ChevronDown from '~/icons/ChevronDown';\nimport ChevronRight from '~/icons/ChevronRight';\nimport {Typography} from '~/components/Typography';\n\nexport const ControlledTreeView: React.FC<ControlledTreeViewProps> = ({\n    data,\n    openedItems = [],\n    selectedItems = [],\n    onClickItem = () => undefined,\n    onDoubleClickItem = () => undefined,\n    onContextMenuItem = () => undefined,\n    onOpenItem = () => undefined,\n    onCloseItem = () => undefined,\n    isReversed = false,\n    ...props\n}) => {\n    const isFlatData = data.filter(item => item.children && item.children.length > 0).length === 0;\n\n    // TODO: Shadowed variables `deep` and `isFlatData` need to be renamed\n    // tslint:disable-next-line:no-shadowed-variable\n    function generateLevelJSX(data: TreeViewData[], deep: number, parentHasIconStart: boolean, isFlatData: boolean) {\n        return data.map(node => {\n            const hasChild = Boolean(node.hasChildren || (node.children && node.children.length !== 0));\n            const hasIconStart = Boolean(node.iconStart);\n            const isClosable = Boolean(node.isClosable !== false);\n            const isOpen = Boolean(openedItems.includes(node.id)) || !isClosable;\n            const isLoading = Boolean(node.isLoading);\n            const isSelected = Boolean(selectedItems.includes(node.id));\n\n            // ---\n            // Manage clicks events\n            // ---\n            const toggleNode = (e: React.SyntheticEvent) => {\n                if (isOpen) {\n                    onCloseItem(node, e);\n                } else {\n                    onOpenItem(node, e);\n                }\n            };\n\n            const handleNodeClick = (e: React.MouseEvent) => {\n                if (onClickItem.length === 0) {\n                    toggleNode(e);\n                }\n\n                onClickItem(node, e, toggleNode);\n            };\n\n            const handleNodeDoubleClick = (e: React.MouseEvent) => {\n                onDoubleClickItem(node, e);\n            };\n\n            const handleNodeContextMenu = (e: React.MouseEvent) => {\n                onContextMenuItem(node, e);\n            };\n\n            // ---\n            // Define CSS treeView_item classes\n            // ---\n            const cssTreeViewItem = clsx(\n                'flexRow_between',\n                'alignCenter',\n                'moonstone-treeView_item',\n                {\n                    'moonstone-selected': isSelected,\n                    'moonstone-reversed': isReversed\n                }\n            );\n\n            // Manage treeView_item's icon\n            // TODO: Shadowed variable `parentHasIconStart` needs to be renamed\n            // tslint:disable-next-line:no-shadowed-variable\n            const displayIcon = (icon: React.ReactElement, size: string, className: string, parentHasIconStart: boolean = false) => {\n                if (!icon && !parentHasIconStart) {\n                    return;\n                }\n\n                return (\n                    <i className={clsx('flexRow', 'alignCenter', className)}>\n                        {icon &&\n                            <icon.type {...icon.props} size={size}/>}\n                    </i>\n                );\n            };\n\n            // Manage if we display icon or loading\n            const displayIconOrLoading = (icon: React.ReactElement) => {\n                const i = isLoading ? <Loading size=\"big\" className=\"moonstone-icon_isLoading\"/> : icon;\n\n                return displayIcon(i, 'default', 'moonstone-treeView_itemIconEnd');\n            };\n\n            // TreeItem has child\n            return (\n                <React.Fragment key={`${deep}-${node.id}`}>\n                    <li role=\"treeitem\"\n                        aria-expanded={isOpen}\n                        {...node.treeItemProps}\n                    >\n                        <div\n                            className={cssTreeViewItem}\n                            style={{\n                                paddingLeft: `calc((var(--spacing-medium) + var(--spacing-nano)) * ${deep} + var(--spacing-medium))`\n                            }}\n                        >\n                            {/* Icon arrow */}\n                            {isClosable && hasChild && (\n                                <div\n                                    className={clsx('flexRow', 'alignCenter', 'moonstone-treeView_itemToggle')}\n                                    onClick={toggleNode}\n                                >\n                                    {isOpen ? <ChevronDown/> : <ChevronRight/>}\n                                </div>\n                            )}\n                            {!isFlatData && !hasChild &&\n                                <div className={clsx('flexRow', 'alignCenter', 'moonstone-treeView_itemToggle')}/>}\n\n                            {/* TreeViewItem */}\n                            <div\n                                className={clsx('flexRow_nowrap', 'alignCenter', 'flexFluid', 'moonstone-treeView_itemLabel', node.className)}\n                                onClick={handleNodeClick}\n                                onDoubleClick={handleNodeDoubleClick}\n                                onContextMenu={handleNodeContextMenu}\n                            >\n                                {displayIcon(node.iconStart, 'small', 'moonstone-treeView_itemIconStart', parentHasIconStart)}\n                                <Typography isNowrap\n                                            className={clsx('flexFluid')}\n                                            component=\"span\"\n                                            variant=\"body\"\n                                            {...node.typographyOptions}\n                                >\n                                    {node.label}\n                                </Typography>\n                                {displayIconOrLoading(node.iconEnd)}\n                            </div>\n                        </div>\n                    </li>\n                    {isOpen && node.children && generateLevelJSX(node.children, isClosable ? (deep + 1) : deep, hasIconStart, isFlatData)}\n                </React.Fragment>\n            );\n        });\n    }\n\n    // TreeView component\n    return (\n        <ul role=\"tree\" {...props}>\n            {generateLevelJSX(data, 0, false, isFlatData)}\n        </ul>\n    );\n};\n"]}