import _extends from "@babel/runtime/helpers/extends";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import React, { useState } from 'react';
import { ControlledTreeView } from "./ControlledTreeView";
export var UncontrolledTreeView = function UncontrolledTreeView(_ref) {
  var defaultOpenedItems = _ref.defaultOpenedItems,
      others = _objectWithoutProperties(_ref, ["defaultOpenedItems"]);

  var _useState = useState(defaultOpenedItems),
      _useState2 = _slicedToArray(_useState, 2),
      openedItems = _useState2[0],
      setOpenedItems = _useState2[1];

  var onOpenItem = function onOpenItem(node) {
    // TODO: need to rename shadowed variable name 'openedItems'
    // tslint:disable-next-line:no-shadowed-variable
    setOpenedItems(function (openedItems) {
      return [].concat(_toConsumableArray(openedItems), [node.id]);
    });
  };

  var onCloseItem = function onCloseItem(node) {
    // TODO: need to rename shadowed variable name 'openedItems'
    // tslint:disable-next-line:no-shadowed-variable
    setOpenedItems(function (openedItems) {
      return openedItems.filter(function (item) {
        return item !== node.id;
      });
    });
  };

  return /*#__PURE__*/React.createElement(ControlledTreeView, _extends({
    openedItems: openedItems,
    onOpenItem: onOpenItem,
    onCloseItem: onCloseItem
  }, others));
};
UncontrolledTreeView.defaultProps = {
  onClickItem: function onClickItem() {
    return undefined;
  },
  onDoubleClickItem: function onDoubleClickItem() {
    return undefined;
  },
  onContextMenuItem: function onContextMenuItem() {
    return undefined;
  },
  defaultOpenedItems: [],
  selectedItems: [],
  isReversed: false
};
//# sourceMappingURL=UncontrolledTreeView.js.map
