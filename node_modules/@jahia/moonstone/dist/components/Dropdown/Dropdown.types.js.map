{"version":3,"sources":["Dropdown.types.ts"],"names":["DropdownVariants","DropdownSizes","DropdownImageSizes"],"mappings":"AAIA,WAAYA,gBAAZ;;WAAYA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;GAAAA,gB,KAAAA,gB;;AAMZ,WAAYC,aAAZ;;WAAYA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;GAAAA,a,KAAAA,a;;AAMZ,WAAYC,kBAAZ;;WAAYA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;GAAAA,kB,KAAAA,kB","sourcesContent":["import React from 'react';\nimport {TreeViewData} from '~/components/TreeView/TreeView.types';\n\nexport type DropdownVariant = 'ghost' | 'outlined';\nexport enum DropdownVariants {\n    Ghost = 'ghost',\n    Outlined = 'outlined'\n}\n\nexport type DropdownSize = 'small' | 'medium';\nexport enum DropdownSizes {\n    Small = 'small',\n    Medium = 'medium'\n}\n\nexport type DropdownImageSize = 'small' | 'big';\nexport enum DropdownImageSizes {\n    Small = 'small',\n    Big = 'big'\n}\n\nexport type DropdownDataOptions = {\n    label?: string;\n    value?: string;\n    isDisabled?: boolean;\n    iconStart?: React.ReactElement;\n    iconEnd?: React.ReactElement;\n    attributes?: unknown;\n    image?: HTMLImageElement;\n    imageSize?: DropdownImageSize;\n}\n\nexport type DropdownData = {\n    groupLabel?: string;\n    options?: [DropdownDataOptions];\n}\n\nexport type HandleSelect = (e: React.MouseEvent | React.KeyboardEvent, item?: DropdownDataOptions) => void;\n\nexport type DropdownProps = {\n    /**\n     * Content of the dropdown\n     */\n    data: [DropdownDataOptions & DropdownData] | [TreeViewData] | any;\n\n    isTree?: boolean,\n\n    /**\n     * Label of the dropdown\n     */\n    label?: string;\n\n    /**\n     * Value of the dropdown\n     */\n    value?: string;\n\n    /**\n     * Icon displays before the dropdown's label\n     */\n    icon?: React.ReactElement;\n\n    /**\n     * Dropdown's variants\n     */\n    variant?: DropdownVariant;\n\n    /**\n     * Dropdown's sizes\n     */\n    size?: DropdownSize;\n\n    /**\n     * Size of images to show in the Dropdown\n     */\n    imageSize?: DropdownImageSize;\n\n    /**\n     * Max width of the dropdown\n     */\n    maxWidth?: string;\n\n    /**\n     * Dropdown is disabled\n     */\n    isDisabled?: boolean;\n\n    /**\n     * Whether the Menu within the Dropdown has a search input\n     */\n    hasSearch?: boolean;\n\n    /**\n     * The text to display if the Dropdown Menu has a search input and the search doesn't have any results\n     */\n    searchEmptyText?: string;\n\n    /**\n     * Additional classname\n     */\n    className?: string;\n\n    /**\n     * Function trigger on change with the current option as param\n     * @param {object} event - Mouse event\n     * @param {object} item - The current item selected\n     */\n    onChange?: (event: React.MouseEvent, item :DropdownDataOptions) => void;\n}\n"]}