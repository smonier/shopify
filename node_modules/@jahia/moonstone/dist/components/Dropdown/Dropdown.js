import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["data", "label", "value", "isDisabled", "maxWidth", "variant", "size", "icon", "hasSearch", "searchEmptyText", "imageSize", "onChange", "className", "isTree"];
import React, { useState } from 'react';
import clsx from 'clsx';
import "./Dropdown.css";
import { DropdownImageSizes, DropdownSizes, DropdownVariants } from "./Dropdown.types";
import { Typography } from "../Typography";
import { ChevronDown } from "../../icons";
import { DropdownMenu } from "./DropdownMenu";
import { TreeViewMenu } from "./TreeViewMenu";
export var Dropdown = function Dropdown(_ref) {
  var data = _ref.data,
      label = _ref.label,
      value = _ref.value,
      isDisabled = _ref.isDisabled,
      _ref$maxWidth = _ref.maxWidth,
      maxWidth = _ref$maxWidth === void 0 ? '300px' : _ref$maxWidth,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? DropdownVariants.Ghost : _ref$variant,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? DropdownSizes.Medium : _ref$size,
      icon = _ref.icon,
      _ref$hasSearch = _ref.hasSearch,
      hasSearch = _ref$hasSearch === void 0 ? false : _ref$hasSearch,
      _ref$searchEmptyText = _ref.searchEmptyText,
      searchEmptyText = _ref$searchEmptyText === void 0 ? 'No results found.' : _ref$searchEmptyText,
      imageSize = _ref.imageSize,
      onChange = _ref.onChange,
      className = _ref.className,
      isTree = _ref.isTree,
      props = _objectWithoutProperties(_ref, _excluded);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isOpened = _useState2[0],
      setIsOpened = _useState2[1];

  var _useState3 = useState(null),
      _useState4 = _slicedToArray(_useState3, 2),
      anchorEl = _useState4[0],
      setAnchorEl = _useState4[1];

  var _useState5 = useState(null),
      _useState6 = _slicedToArray(_useState5, 2),
      minWidth = _useState6[0],
      setMinWith = _useState6[1];

  var isEmpty = data.length < 1;
  var menuMinWidth = 80;
  var anchorPosition = {
    top: 4,
    left: 0
  };
  var menuMaxWidth;
  var menuMaxHeight; // Return nothing if `data` isn't an array

  if (!Array.isArray(data)) {
    return null;
  }

  switch (imageSize) {
    case DropdownImageSizes.Big:
      menuMaxWidth = '400px';
      menuMaxHeight = '440px';
      break;

    case DropdownImageSizes.Small:
      menuMaxWidth = '264px';
      menuMaxHeight = '320px';
      break;

    default:
      // Default menu size for the dropdown when no image size is provided
      menuMaxWidth = '250px';
      menuMaxHeight = '270px';
  } // ---
  // Functions to handle events
  // ---


  var handleOpenMenu = function handleOpenMenu(e) {
    var dropdownWidth = e.currentTarget.offsetWidth;
    setMinWith("".concat(dropdownWidth < menuMinWidth ? menuMinWidth : dropdownWidth, "px"));
    setAnchorEl(e.currentTarget);
    setIsOpened(true);
  };

  var handleSelect = function handleSelect(e, item) {
    if (item) {
      var canClose = !item.isDisabled;

      if (!item.isDisabled && item.value !== value) {
        e.stopPropagation();
        canClose = onChange(e, item);
      }

      if (canClose !== false) {
        setIsOpened(false);
      }
    }
  };

  var handleCloseMenu = function handleCloseMenu() {
    setIsOpened(false);
    setAnchorEl(null);
  };

  var handleKeyPress = function handleKeyPress(e, item) {
    if (e.key === 'Enter') {
      handleSelect(e, item);
    }
  }; // ---
  // CSS classes
  // ---


  var cssDropdown = clsx(!label && !icon ? 'flexRow_reverse' : 'flexRow_between', 'alignCenter', 'moonstone-dropdown', "moonstone-".concat(size), "moonstone-dropdown_".concat(variant), {
    'moonstone-disabled': typeof isDisabled === 'undefined' && isEmpty ? true : isDisabled,
    'moonstone-filled': value,
    'moonstone-opened': isOpened
  });
  return /*#__PURE__*/React.createElement("div", _extends({
    className: clsx('moonstone-dropdown_container', className),
    style: {
      maxWidth: maxWidth
    }
  }, props, {
    onKeyPress: function onKeyPress(e) {
      if (e.key === 'Enter') {
        handleOpenMenu(e);
      }
    }
  }), /*#__PURE__*/React.createElement("div", {
    role: "dropdown",
    className: clsx(cssDropdown),
    tabIndex: 0,
    onClick: handleOpenMenu,
    onKeyPress: function onKeyPress(e) {
      if (e.key === 'Enter') {
        handleSelect(e);
      }
    }
  }, icon && /*#__PURE__*/React.createElement(icon.type, _extends({}, icon.props, {
    size: "small",
    className: clsx('moonstone-dropdown_icon')
  })), /*#__PURE__*/React.createElement(Typography, {
    isNowrap: true,
    variant: "caption",
    component: "span",
    className: clsx('flexFluid'),
    title: label
  }, label), /*#__PURE__*/React.createElement(ChevronDown, {
    className: "moonstone-dropdown_chevronDown"
  })), isOpened && (isTree ? /*#__PURE__*/React.createElement(TreeViewMenu, {
    isDisplayed: true,
    data: data,
    value: value,
    anchorPosition: anchorPosition,
    minWidth: minWidth,
    maxWidth: menuMaxWidth,
    maxHeight: menuMaxHeight,
    anchorEl: anchorEl,
    hasSearch: hasSearch,
    searchEmptyText: searchEmptyText,
    handleKeyPress: handleKeyPress,
    handleSelect: handleSelect,
    imageSize: imageSize,
    onClose: handleCloseMenu
  }) : /*#__PURE__*/React.createElement(DropdownMenu, {
    isDisplayed: true,
    data: data,
    value: value,
    anchorPosition: anchorPosition,
    minWidth: minWidth,
    maxWidth: menuMaxWidth,
    maxHeight: menuMaxHeight,
    anchorEl: anchorEl,
    hasSearch: hasSearch,
    searchEmptyText: searchEmptyText,
    handleKeyPress: handleKeyPress,
    handleSelect: handleSelect,
    imageSize: imageSize,
    onClose: handleCloseMenu
  })));
};
Dropdown.displayName = 'Dropdown';
//# sourceMappingURL=Dropdown.js.map
