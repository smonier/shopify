import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
var _excluded = ["isDisplayed", "minWidth", "maxWidth", "maxHeight", "anchorEl", "anchorPosition", "anchorElOrigin", "transformElOrigin", "position", "hasOverlay", "hasSearch", "data", "value", "handleSelect", "onClose"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { useState } from 'react';
import { usePositioning } from "../../hooks/usePositioning";
import { SearchInput, TreeView } from "./..";
import "../Menu/Menu.css";
import clsx from 'clsx';

function filterNodes(text, nodes, opened) {
  var filtered = [];
  nodes.forEach(function (c) {
    var filterResult = filterNode(text, c, opened);

    if (filterResult) {
      filtered.push(filterResult);
    }
  });
  return filtered;
}

var filterNode = function filterNode(text, node, opened) {
  var match = node.label.toLowerCase().includes(text);
  var children = [];

  if (node.children) {
    var filteredChildren = filterNodes(text, node.children, opened);

    if (filteredChildren.length > 0) {
      children.push.apply(children, _toConsumableArray(filteredChildren));
      opened.push(node.id);
    }
  }

  if (match || children.length > 0) {
    return _objectSpread(_objectSpread({}, node), {}, {
      treeItemProps: {
        className: clsx({
          'moonstone-disabled': !match
        })
      },
      children: children
    });
  }
};

var find = function find(value, data, opened) {
  if (data.value === value) {
    return data.id;
  }

  if (data.children) {
    var res = data.children.reduce(function (current, child) {
      return current || find(value, child, opened);
    }, '');

    if (res) {
      opened.push(data.id);
    }

    return res;
  }
};

export var TreeViewMenu = function TreeViewMenu(_ref) {
  var isDisplayed = _ref.isDisplayed,
      minWidth = _ref.minWidth,
      maxWidth = _ref.maxWidth,
      maxHeight = _ref.maxHeight,
      anchorEl = _ref.anchorEl,
      anchorPosition = _ref.anchorPosition,
      anchorElOrigin = _ref.anchorElOrigin,
      transformElOrigin = _ref.transformElOrigin,
      position = _ref.position,
      hasOverlay = _ref.hasOverlay,
      hasSearch = _ref.hasSearch,
      data = _ref.data,
      value = _ref.value,
      handleSelect = _ref.handleSelect,
      onClose = _ref.onClose,
      props = _objectWithoutProperties(_ref, _excluded);

  var _usePositioning = usePositioning(isDisplayed, anchorPosition, anchorEl, anchorElOrigin, transformElOrigin, position),
      _usePositioning2 = _slicedToArray(_usePositioning, 2),
      stylePosition = _usePositioning2[0],
      itemRef = _usePositioning2[1]; // UseEnterExitCallbacks(isDisplayed, onExiting, onExited, onEntering, onEntered);


  var _useState = useState(''),
      _useState2 = _slicedToArray(_useState, 2),
      inputValue = _useState2[0],
      setInputValue = _useState2[1];

  var _useState3 = useState([]),
      _useState4 = _slicedToArray(_useState3, 2),
      openedItems = _useState4[0],
      setOpenedItems = _useState4[1];

  var onOpenItem = function onOpenItem(node) {
    setOpenedItems(function (previousOpenedItems) {
      return [].concat(_toConsumableArray(previousOpenedItems), [node.id]);
    });
  };

  var onCloseItem = function onCloseItem(node) {
    setOpenedItems(function (previousOpenedItems) {
      return previousOpenedItems.filter(function (item) {
        return item !== node.id;
      });
    });
  };

  var openedBySearch = [];
  var selected = [];

  if (inputValue !== '') {
    data = filterNodes(inputValue, data, openedBySearch);
  }

  if (value) {
    data.forEach(function (single) {
      var id = find(value, single, openedBySearch);

      if (id) {
        selected.push(id);
      }
    });
  } // ---
  // Styling
  // ---


  var styleMenu = _objectSpread({
    position: position
  }, stylePosition);

  if (minWidth) {
    styleMenu.minWidth = minWidth;
  }

  if (maxWidth) {
    styleMenu.maxWidth = maxWidth;
  }

  if (maxHeight) {
    styleMenu.maxHeight = maxHeight;
  } // ---
  // Render
  // ---


  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("menu", _extends({
    ref: itemRef,
    className: "moonstone-menu",
    style: styleMenu
  }, props), hasSearch && /*#__PURE__*/React.createElement("div", {
    className: "moonstone-menu_searchInput"
  }, /*#__PURE__*/React.createElement(SearchInput, {
    value: inputValue,
    onChange: function onChange(e) {
      return setInputValue(e.target.value);
    },
    onClear: function onClear() {
      return setInputValue('');
    }
  })), /*#__PURE__*/React.createElement(TreeView, {
    data: data,
    selectedItems: selected,
    openedItems: [].concat(_toConsumableArray(openedItems), openedBySearch),
    onOpenItem: onOpenItem,
    onCloseItem: onCloseItem,
    onClickItem: function onClickItem(node, e) {
      handleSelect(e, node);
    }
  })), hasOverlay && isDisplayed && /*#__PURE__*/React.createElement("div", {
    "aria-hidden": "true",
    className: "moonstone-menu_overlay",
    onClick: onClose,
    onContextMenu: onClose
  }));
}; // Kept defaultProps here because of unnecessary re-rendering when provided as default parameters to the function component

/* eslint-disable react/default-props-match-prop-types */

TreeViewMenu.defaultProps = {
  hasOverlay: true,
  hasSearch: false,
  searchEmptyText: 'No results found.',
  position: 'fixed',
  anchorEl: null,
  anchorPosition: {
    top: 0,
    left: 0
  },
  anchorElOrigin: {
    vertical: 'bottom',
    horizontal: 'left'
  },
  transformElOrigin: {
    vertical: 'top',
    horizontal: 'left'
  }
};
/* eslint-enable react/default-props-match-prop-types */

TreeViewMenu.displayName = 'TreeViewMenu';
//# sourceMappingURL=TreeViewMenu.js.map
