{"version":3,"sources":["TreeViewMenu.tsx"],"names":["React","useState","usePositioning","SearchInput","TreeView","clsx","filterNodes","text","nodes","opened","filtered","forEach","c","filterResult","filterNode","push","node","match","label","toLowerCase","includes","children","filteredChildren","length","id","treeItemProps","className","find","value","data","res","reduce","current","child","TreeViewMenu","isDisplayed","minWidth","maxWidth","maxHeight","anchorEl","anchorPosition","anchorElOrigin","transformElOrigin","position","hasOverlay","hasSearch","handleSelect","onClose","props","stylePosition","itemRef","inputValue","setInputValue","openedItems","setOpenedItems","onOpenItem","previousOpenedItems","onCloseItem","filter","item","openedBySearch","selected","single","styleMenu","e","target","defaultProps","searchEmptyText","top","left","vertical","horizontal","displayName"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport {usePositioning} from '~/hooks/usePositioning';\nimport {TreeViewMenuProps} from './TreeViewMenu.types';\nimport {SearchInput, TreeView} from '~/components';\nimport '../Menu/Menu.scss';\nimport {TreeViewData} from '~/components/TreeView/TreeView.types';\nimport clsx from 'clsx';\n\nfunction filterNodes(text: string, nodes: TreeViewData[], opened: string[]) {\n    const filtered: TreeViewData[] = [];\n    nodes.forEach(c => {\n        const filterResult = filterNode(text, c, opened);\n        if (filterResult) {\n            filtered.push(filterResult);\n        }\n    });\n    return filtered;\n}\n\nconst filterNode = (text: string, node: TreeViewData, opened: string[]) => {\n    const match = node.label.toLowerCase().includes(text);\n    const children: TreeViewData[] = [];\n    if (node.children) {\n        const filteredChildren = filterNodes(text, node.children, opened);\n        if (filteredChildren.length > 0) {\n            children.push(...filteredChildren);\n            opened.push(node.id);\n        }\n    }\n\n    if (match || children.length > 0) {\n        return {\n            ...node,\n            treeItemProps: {className: clsx({\n                'moonstone-disabled': !match\n            })},\n            children\n        };\n    }\n};\n\nconst find = (value: string, data: TreeViewData, opened: string[]): string => {\n    if (data.value === value) {\n        return data.id;\n    }\n\n    if (data.children) {\n        const res = data.children.reduce((current, child) => {\n            return current || find(value, child, opened);\n        }, '');\n\n        if (res) {\n            opened.push(data.id);\n        }\n\n        return res;\n    }\n};\n\nexport const TreeViewMenu: React.FC<TreeViewMenuProps> = ({\n    isDisplayed,\n    minWidth,\n    maxWidth,\n    maxHeight,\n    anchorEl,\n    anchorPosition,\n    anchorElOrigin,\n    transformElOrigin,\n    position,\n    hasOverlay,\n    hasSearch,\n    // SearchEmptyText,\n    data,\n    value,\n    handleSelect,\n    // HandleKeyPress,\n    onClose,\n    ...props\n}) => {\n    const [stylePosition, itemRef] = usePositioning(isDisplayed, anchorPosition, anchorEl, anchorElOrigin, transformElOrigin, position);\n    // UseEnterExitCallbacks(isDisplayed, onExiting, onExited, onEntering, onEntered);\n    const [inputValue, setInputValue] = useState('');\n    const [openedItems, setOpenedItems] = useState([]);\n\n    const onOpenItem = (node: TreeViewData) => {\n        setOpenedItems(previousOpenedItems => [...previousOpenedItems, node.id]);\n    };\n\n    const onCloseItem = (node: TreeViewData) => {\n        setOpenedItems(previousOpenedItems => previousOpenedItems.filter(item => item !== node.id));\n    };\n\n    const openedBySearch: string[] = [];\n    const selected: string[] = [];\n\n    if (inputValue !== '') {\n        data = filterNodes(inputValue, data, openedBySearch);\n    }\n\n    if (value) {\n        data.forEach(single => {\n            const id = find(value, single, openedBySearch);\n            if (id) {\n                selected.push(id);\n            }\n        });\n    }\n\n    // ---\n    // Styling\n    // ---\n    const styleMenu: React.CSSProperties = {\n        position,\n        ...stylePosition as React.CSSProperties\n    };\n\n    if (minWidth) {\n        styleMenu.minWidth = minWidth;\n    }\n\n    if (maxWidth) {\n        styleMenu.maxWidth = maxWidth;\n    }\n\n    if (maxHeight) {\n        styleMenu.maxHeight = maxHeight;\n    }\n\n    // ---\n    // Render\n    // ---\n    return (\n        <>\n            <menu ref={itemRef}\n                  className=\"moonstone-menu\"\n                  style={styleMenu}\n                  {...props}\n            >\n                {hasSearch && (\n                    <div className=\"moonstone-menu_searchInput\">\n                        <SearchInput\n                            value={inputValue}\n                            onChange={e => setInputValue(e.target.value)}\n                            onClear={() => setInputValue('')}\n                        />\n                    </div>\n                )}\n                <TreeView data={data}\n                          selectedItems={selected}\n                          openedItems={[...openedItems, ...openedBySearch]}\n                          onOpenItem={onOpenItem}\n                          onCloseItem={onCloseItem}\n                          onClickItem={(node, e) => {\n                              handleSelect(e, node);\n                          }}\n                />\n            </menu>\n            {\n                hasOverlay && isDisplayed && (\n                    <div\n                        aria-hidden=\"true\"\n                        className=\"moonstone-menu_overlay\"\n                        onClick={onClose}\n                        onContextMenu={onClose}\n                    />\n                )\n            }\n        </>\n    );\n};\n\n// Kept defaultProps here because of unnecessary re-rendering when provided as default parameters to the function component\n/* eslint-disable react/default-props-match-prop-types */\nTreeViewMenu.defaultProps = {\n    hasOverlay: true,\n    hasSearch: false,\n    searchEmptyText: 'No results found.',\n    position: 'fixed',\n    anchorEl: null,\n    anchorPosition: {\n        top: 0,\n        left: 0\n    },\n    anchorElOrigin: {\n        vertical: 'bottom',\n        horizontal: 'left'\n    },\n    transformElOrigin: {\n        vertical: 'top',\n        horizontal: 'left'\n    }\n};\n/* eslint-enable react/default-props-match-prop-types */\n\nTreeViewMenu.displayName = 'TreeViewMenu';\n"]}