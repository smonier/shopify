{"version":3,"sources":["Dropdown.tsx"],"names":["React","useState","clsx","DropdownImageSizes","DropdownSizes","DropdownVariants","Typography","ChevronDown","DropdownMenu","TreeViewMenu","Dropdown","data","label","value","isDisabled","maxWidth","variant","Ghost","size","Medium","icon","hasSearch","searchEmptyText","imageSize","onChange","className","isTree","props","isOpened","setIsOpened","anchorEl","setAnchorEl","minWidth","setMinWith","isEmpty","length","menuMinWidth","anchorPosition","top","left","menuMaxWidth","menuMaxHeight","Array","isArray","Big","Small","handleOpenMenu","e","dropdownWidth","currentTarget","offsetWidth","handleSelect","item","canClose","stopPropagation","handleCloseMenu","handleKeyPress","key","cssDropdown","displayName"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport clsx from 'clsx';\nimport './Dropdown.scss';\n\nimport {\n    DropdownData,\n    DropdownDataOptions,\n    DropdownImageSizes,\n    DropdownProps,\n    DropdownSizes,\n    DropdownVariants,\n    HandleSelect\n} from './Dropdown.types';\nimport {Typography} from '~/components/Typography';\nimport {ChevronDown} from '~/icons';\nimport {DropdownMenu} from '~/components/Dropdown/DropdownMenu';\nimport {TreeViewMenu} from '~/components/Dropdown/TreeViewMenu';\nimport {TreeViewData} from '~/components/TreeView/TreeView.types';\n\nexport const Dropdown: React.FC<DropdownProps> = ({\n    data,\n    label,\n    value,\n    isDisabled,\n    maxWidth = '300px',\n    variant = DropdownVariants.Ghost,\n    size = DropdownSizes.Medium,\n    icon,\n    hasSearch = false,\n    searchEmptyText = 'No results found.',\n    imageSize,\n    onChange,\n    className,\n    isTree,\n    ...props\n}) => {\n    const [isOpened, setIsOpened] = useState(false);\n    const [anchorEl, setAnchorEl] = useState(null);\n    const [minWidth, setMinWith] = useState(null);\n    const isEmpty = data.length < 1;\n    const menuMinWidth = 80;\n    const anchorPosition = {\n        top: 4,\n        left: 0\n    };\n    let menuMaxWidth;\n    let menuMaxHeight;\n\n    // Return nothing if `data` isn't an array\n    if (!Array.isArray(data)) {\n        return null;\n    }\n\n    switch (imageSize) {\n        case DropdownImageSizes.Big:\n            menuMaxWidth = '400px';\n            menuMaxHeight = '440px';\n            break;\n        case DropdownImageSizes.Small:\n            menuMaxWidth = '264px';\n            menuMaxHeight = '320px';\n            break;\n        default:\n            // Default menu size for the dropdown when no image size is provided\n            menuMaxWidth = '250px';\n            menuMaxHeight = '270px';\n    }\n\n    // ---\n    // Functions to handle events\n    // ---\n    const handleOpenMenu = (e: React.MouseEvent | React.KeyboardEvent) => {\n        const dropdownWidth = (e.currentTarget as HTMLElement).offsetWidth;\n        setMinWith(`${dropdownWidth < menuMinWidth ? menuMinWidth : dropdownWidth}px`);\n        setAnchorEl(e.currentTarget);\n        setIsOpened(true);\n    };\n\n    const handleSelect: HandleSelect = (e, item) => {\n        if (item) {\n            let canClose: boolean | void = !item.isDisabled;\n            if (!item.isDisabled && item.value !== value) {\n                e.stopPropagation();\n                canClose = (onChange as (e: React.MouseEvent | React.KeyboardEvent, item: DropdownDataOptions) => void)(e, item);\n            }\n\n            if (canClose !== false) {\n                setIsOpened(false);\n            }\n        }\n    };\n\n    const handleCloseMenu = () => {\n        setIsOpened(false);\n        setAnchorEl(null);\n    };\n\n    const handleKeyPress = (e: React.KeyboardEvent, item: DropdownDataOptions) => {\n        if (e.key === 'Enter') {\n            handleSelect(e, item);\n        }\n    };\n\n    // ---\n    // CSS classes\n    // ---\n\n    const cssDropdown = clsx(\n        !label && !icon ? 'flexRow_reverse' : 'flexRow_between',\n        'alignCenter',\n        'moonstone-dropdown',\n        `moonstone-${size}`,\n        `moonstone-dropdown_${variant}`,\n        {\n            'moonstone-disabled': (typeof isDisabled === 'undefined' && isEmpty) ? true : isDisabled,\n            'moonstone-filled': value,\n            'moonstone-opened': isOpened\n        }\n    );\n\n    return (\n        <div\n            className={clsx('moonstone-dropdown_container', className)}\n            style={{maxWidth}}\n            {...props}\n            onKeyPress={e => {\n                if (e.key === 'Enter') {\n                    handleOpenMenu(e);\n                }\n            }}\n        >\n            <div\n                role=\"dropdown\"\n                className={clsx(cssDropdown)}\n                tabIndex={0}\n                onClick={handleOpenMenu}\n                onKeyPress={(e: React.KeyboardEvent) => {\n                    if (e.key === 'Enter') {\n                        handleSelect(e);\n                    }\n                }}\n            >\n                {\n                    icon &&\n                    <icon.type {...icon.props} size=\"small\" className={clsx('moonstone-dropdown_icon')}/>\n                }\n\n                <Typography\n                    isNowrap\n                    variant=\"caption\"\n                    component=\"span\"\n                    className={clsx('flexFluid')}\n                    title={label}\n                >\n                    {label}\n                </Typography>\n                <ChevronDown className=\"moonstone-dropdown_chevronDown\"/>\n            </div>\n\n            {isOpened && (isTree ? (\n                <TreeViewMenu\n                    isDisplayed\n                    data={data as [TreeViewData]}\n                    value={value}\n                    anchorPosition={anchorPosition}\n                    minWidth={minWidth}\n                    maxWidth={menuMaxWidth}\n                    maxHeight={menuMaxHeight}\n                    anchorEl={anchorEl}\n                    hasSearch={hasSearch}\n                    searchEmptyText={searchEmptyText}\n                    handleKeyPress={handleKeyPress}\n                    handleSelect={handleSelect}\n                    imageSize={imageSize}\n                    onClose={handleCloseMenu}\n                />\n            ) : (\n                <DropdownMenu\n                    isDisplayed\n                    data={data as [DropdownDataOptions & DropdownData]}\n                    value={value}\n                    anchorPosition={anchorPosition}\n                    minWidth={minWidth}\n                    maxWidth={menuMaxWidth}\n                    maxHeight={menuMaxHeight}\n                    anchorEl={anchorEl}\n                    hasSearch={hasSearch}\n                    searchEmptyText={searchEmptyText}\n                    handleKeyPress={handleKeyPress}\n                    handleSelect={handleSelect}\n                    imageSize={imageSize}\n                    onClose={handleCloseMenu}\n                />\n            ))}\n        </div>\n    );\n};\n\nDropdown.displayName = 'Dropdown';\n"]}