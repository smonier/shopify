{"version":3,"sources":["Dropdown.tsx"],"names":["React","useState","clsx","spacings","DropdownImageSizes","DropdownVariants","DropdownSizes","Menu","MenuItem","Typography","Separator","ChevronDown","Dropdown","data","label","value","isDisabled","maxWidth","variant","size","icon","hasSearch","searchEmptyText","imageSize","onChange","className","props","Array","isArray","isOpened","setIsOpened","anchorEl","setAnchorEl","minWidth","setMinWith","isEmpty","length","isGrouped","options","menuMinWidth","menuMaxWidth","menuMaxHeight","anchorPosition","top","parseInt","spacingNano","left","Big","Small","handleOpenMenu","e","dropdownWidth","currentTarget","offsetWidth","handleSelect","item","canClose","stopPropagation","handleCloseMenu","handleKeyPress","key","cssDropdown","dropdownOption","iconStart","iconEnd","image","attributes","dropdownGrouped","children","groupLabel","index","map","o","defaultProps","Ghost","Medium","displayName"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport clsx from 'clsx';\nimport './Dropdown.scss';\nimport spacings from '~/tokens/spacings/spacing.json';\n\nimport {\n    DropdownProps,\n    DropdownImageSizes,\n    HandleSelect,\n    DropdownDataOptions,\n    DropdownVariants,\n    DropdownSizes\n} from './Dropdown.types';\nimport {Menu, MenuItem} from '~/components/Menu';\nimport {Typography} from '~/components/Typography';\nimport {Separator} from '~/components/Separator';\nimport {ChevronDown} from '~/icons';\n\nexport const Dropdown: React.FC<DropdownProps> = ({\n    data,\n    label,\n    value,\n    isDisabled,\n    maxWidth,\n    variant,\n    size,\n    icon,\n    hasSearch,\n    searchEmptyText,\n    imageSize,\n    onChange,\n    className,\n    ...props\n}) => {\n\n    // Return nothing if `data` isn't an array\n    if (!Array.isArray(data)) {\n        return null;\n    }\n\n    const [isOpened, setIsOpened] = useState(false);\n    const [anchorEl, setAnchorEl] = useState(null);\n    const [minWidth, setMinWith] = useState(null);\n    const isEmpty = data.length < 1;\n    const isGrouped = !isEmpty && typeof data[0].options !== 'undefined';\n    const menuMinWidth = 80;\n    let menuMaxWidth;\n    let menuMaxHeight;\n\n    const anchorPosition = {\n        top: parseInt(spacings.spacingNano, 10),\n        left: 0\n    };\n\n    switch (imageSize) {\n        case DropdownImageSizes.Big:\n            menuMaxWidth = '400px';\n            menuMaxHeight = '440px';\n            break;\n        case DropdownImageSizes.Small:\n            menuMaxWidth = '264px';\n            menuMaxHeight = '320px';\n            break;\n        default:\n            // Default menu size for the dropdown when no image size is provided\n            menuMaxWidth = '250px';\n            menuMaxHeight = '270px';\n    }\n\n    // ---\n    // Functions to handle events\n    // ---\n    const handleOpenMenu = (e: React.MouseEvent | React.KeyboardEvent) => {\n        const dropdownWidth = (e.currentTarget as HTMLElement).offsetWidth;\n        setMinWith(`${dropdownWidth < menuMinWidth ? menuMinWidth : dropdownWidth}px`);\n        setAnchorEl(e.currentTarget);\n        setIsOpened(true);\n    };\n\n    const handleSelect: HandleSelect = (e, item) => {\n        if (item) {\n            let canClose: boolean | void = !item.isDisabled;\n            if (!item.isDisabled && item.value !== value) {\n                e.stopPropagation();\n                canClose = (onChange as (e: React.MouseEvent | React.KeyboardEvent, item: DropdownDataOptions) => void)(e, item);\n            }\n\n            if (canClose !== false) {\n                setIsOpened(false);\n            }\n        }\n    };\n\n    const handleCloseMenu = () => {\n        setIsOpened(false);\n        setAnchorEl(null);\n    };\n\n    const handleKeyPress = (e: React.KeyboardEvent, item: DropdownDataOptions) => {\n        if (e.key === 'Enter') {\n            handleSelect(e, item);\n        }\n    };\n\n    // ---\n    // CSS classes\n    // ---\n\n    const cssDropdown = clsx(\n        !label && !icon ? 'flexRow_reverse' : 'flexRow_between',\n        'alignCenter',\n        'moonstone-dropdown',\n        `moonstone-${size}`,\n        `moonstone-dropdown_${variant}`,\n        {\n            'moonstone-disabled': (typeof isDisabled === 'undefined' && isEmpty) ? true : isDisabled,\n            'moonstone-filled': value,\n            'moonstone-opened': isOpened\n        }\n    );\n\n    // ---\n    // Generate options\n    // ---\n    const dropdownOption = (item: DropdownDataOptions) => (\n        <MenuItem\n            key={item.value}\n            role=\"option\"\n            iconStart={item.iconStart}\n            label={item.label}\n            iconEnd={item.iconEnd}\n            isDisabled={item.isDisabled}\n            isSelected={value === item.value}\n            image={item.image}\n            imageSize={imageSize}\n            onClick={e => handleSelect(e, item)}\n            onKeyPress={e => handleKeyPress(e, item)}\n            {...item.attributes}\n        />\n    );\n\n    const dropdownGrouped = (children: [DropdownDataOptions], groupLabel: string, index: number) => {\n        return (\n            <div key={`${groupLabel}-${index}`} data-option-type=\"group\">\n                {index > 0 && (\n                    <Separator/>\n                )}\n\n                <MenuItem variant=\"title\" label={groupLabel}/>\n\n                {children.map(item => {\n                    return dropdownOption(item);\n                })}\n            </div>\n        );\n    };\n\n    return (\n        <div\n            className={clsx('moonstone-dropdown_container', className)}\n            style={{maxWidth}}\n            {...props}\n            onKeyPress={e => {\n                if (e.key === 'Enter') {\n                    handleOpenMenu(e);\n                }\n            }}\n        >\n            <div\n                role=\"dropdown\"\n                className={clsx(cssDropdown)}\n                tabIndex={0}\n                onClick={handleOpenMenu}\n                onKeyPress={(e: React.KeyboardEvent) => {\n                    if (e.key === 'Enter') {\n                        handleSelect(e);\n                    }\n                }}\n            >\n                {\n                    icon &&\n                    <icon.type {...icon.props} size=\"small\" className={clsx('moonstone-dropdown_icon')}/>\n                }\n\n                <Typography\n                    isNowrap\n                    variant=\"caption\"\n                    component=\"span\"\n                    className={clsx('flexFluid')}\n                >\n                    {label}\n                </Typography>\n                <ChevronDown className=\"moonstone-dropdown_chevronDown\"/>\n            </div>\n\n            {isOpened && (\n                <Menu\n                    isDisplayed\n                    position=\"absolute\"\n                    anchorPosition={anchorPosition}\n                    minWidth={minWidth}\n                    maxWidth={menuMaxWidth}\n                    maxHeight={menuMaxHeight}\n                    anchorEl={anchorEl}\n                    hasSearch={hasSearch}\n                    searchEmptyText={searchEmptyText}\n                    onClose={handleCloseMenu}\n                >\n                    {\n                        data.map((item, index) => {\n                            if (isGrouped) {\n                                item.options.map((o: DropdownDataOptions) => {\n                                    return dropdownOption(o);\n                                });\n                                return dropdownGrouped(item.options, item.groupLabel, index);\n                            }\n\n                            return dropdownOption(item);\n                        })\n                    }\n                </Menu>\n            )}\n        </div>\n    );\n};\n\nDropdown.defaultProps = {\n    icon: null,\n    variant: DropdownVariants.Ghost,\n    size: DropdownSizes.Medium,\n    maxWidth: '300px',\n    hasSearch: false,\n    searchEmptyText: 'No results found.'\n};\n\nDropdown.displayName = 'Dropdown';\n"]}