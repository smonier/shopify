import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React from 'react';
import clsx from 'clsx';
import "./TableRow.css";
export var TableRow = function TableRow(_ref) {
  var className = _ref.className,
      _ref$component = _ref.component,
      component = _ref$component === void 0 ? 'tr' : _ref$component,
      _ref$hasMultipleLines = _ref.hasMultipleLines,
      hasMultipleLines = _ref$hasMultipleLines === void 0 ? false : _ref$hasMultipleLines,
      _ref$isSelected = _ref.isSelected,
      isSelected = _ref$isSelected === void 0 ? false : _ref$isSelected,
      _ref$isHighlighted = _ref.isHighlighted,
      isHighlighted = _ref$isHighlighted === void 0 ? false : _ref$isHighlighted,
      children = _ref.children,
      props = _objectWithoutProperties(_ref, ["className", "component", "hasMultipleLines", "isSelected", "isHighlighted", "children"]);

  return /*#__PURE__*/React.createElement(component, _objectSpread({
    className: clsx('flexRow', 'moonstone-TableRow', 'alignCenter', hasMultipleLines && 'moonstone-TableRow-multipleLines', isSelected && 'moonstone-TableRow-selected', isHighlighted && 'moonstone-TableRow-highlighted', className)
  }, props), children);
};
TableRow.displayName = 'TableRow';
//# sourceMappingURL=TableRow.js.map
