{"version":3,"sources":["TableBodyCell.tsx"],"names":["React","clsx","IconTextIcon","Typography","ChevronRight","ChevronDown","capitalize","TableCell","TableBodyCellForwardRef","ref","component","textAlign","verticalAlign","className","iconStart","iconEnd","isExpandableColumn","width","row","cell","children","isScrollable","props","leftMarginBuffer","leftMarginIndentDepth","depth","scrollableClass","renderCellContent","renderTableCell","canExpand","getToggleRowExpandedProps","style","marginLeft","isExpanded","flexFluid","TableBodyCell","forwardRef","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport clsx from 'clsx';\n\nimport {TableCellProps} from './TableCell.types';\nimport {IconTextIcon, Typography} from '~/components';\nimport {ChevronRight, ChevronDown} from '~/icons';\nimport {capitalize} from '~/utils/helpers';\nimport {TableCell} from './TableCell';\nimport './TableCell.scss';\n\nconst TableBodyCellForwardRef: React.ForwardRefRenderFunction<HTMLDivElement, TableCellProps> = (\n    {\n        component = 'td',\n        textAlign = 'left',\n        verticalAlign = 'center',\n        className,\n        iconStart,\n        iconEnd,\n        isExpandableColumn,\n        width,\n        row,\n        cell,\n        children,\n        isScrollable,\n        ...props\n    }, ref) => {\n    const leftMarginBuffer = 20; // Px\n    const leftMarginIndentDepth = row?.depth * 20; // Px\n    const scrollableClass = isScrollable ? 'moonstone-tableCellContent' : '';\n\n    const renderCellContent = () => (\n        <IconTextIcon component=\"div\" iconStart={iconStart} iconEnd={iconEnd} typographyProps={{className: clsx(scrollableClass, 'flexFluid')}}>\n            {children}\n        </IconTextIcon>\n    );\n\n    const renderTableCell = () => {\n        // These are cells that are in the expandable row (canExpand) and it is the column in\n        // which the cells show the chevron icon to expand and collapse sub-rows (isExpandableColumn)\n        if (isExpandableColumn && row?.canExpand) {\n            return (\n                <TableCell ref={ref} {...row?.getToggleRowExpandedProps({style: {marginLeft: `${leftMarginIndentDepth}px`}})}>\n                    {row?.isExpanded ?\n                        <ChevronDown className=\"moonstone-marginRightNano\"/> :\n                        <ChevronRight className=\"moonstone-marginRightNano\"/>}\n                    {renderCellContent()}\n                </TableCell>\n            );\n        }\n\n        // These are cells which are in the expandable column (isExpandableColumn), but themselves\n        // do now have sub-rows. Therefore, they need to have the appropriate nested indentation,\n        // but do not have the chevron to expand/collapse rows underneath them.\n        // Also, a buffer of 20px is added so that they are aligned with the cells that do have\n        // the chevron icons for expand/collapse\n        if (isExpandableColumn && !row?.canExpand) {\n            return (\n                <TableCell ref={ref} style={{marginLeft: `${leftMarginIndentDepth + leftMarginBuffer}px`}}>\n                    {renderCellContent()}\n                </TableCell>\n            );\n        }\n\n        // These are just the normal cells in the other columns which don't display anything with\n        // relation to the row expansion feature\n        return <TableCell ref={ref}>{renderCellContent()}</TableCell>;\n    };\n\n    return (\n        <Typography\n            className={clsx(\n                'moonstone-tableBodyCell',\n                'textAlign' + capitalize(textAlign),\n                'moonstone-verticalAlign' + capitalize(verticalAlign),\n                {flexFluid: typeof width === 'undefined'},\n                className\n            )}\n            component={component}\n            variant=\"body\"\n            style={{width: width}}\n            {...props}\n        >\n            {renderTableCell()}\n        </Typography>\n    );\n};\n\nexport const TableBodyCell = React.forwardRef(TableBodyCellForwardRef);\n\nTableBodyCell.displayName = 'TableBodyCell';\n"]}