{"version":3,"sources":["TableBodyCell.tsx"],"names":["React","clsx","IconTextIcon","Typography","ChevronRight","ChevronDown","capitalize","TableCell","TableBodyCell","component","textAlign","verticalAlign","className","iconStart","iconEnd","isExpandableColumn","width","row","cell","children","isScrollable","props","leftMarginBuffer","leftMarginIndentDepth","depth","scrollableClass","renderCellContent","renderTableCell","canExpand","getToggleRowExpandedProps","style","marginLeft","isExpanded","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport clsx from 'clsx';\n\nimport {TableCellProps} from './TableCell.types';\nimport {IconTextIcon, Typography} from '~/components';\nimport {ChevronRight, ChevronDown} from '~/icons';\nimport {capitalize} from '~/utils/helpers';\nimport {TableCell} from './TableCell';\nimport './TableCell.scss';\n\nexport const TableBodyCell: React.FC<TableCellProps> = ({\n    component = 'td',\n    textAlign = 'left',\n    verticalAlign = 'center',\n    className,\n    iconStart,\n    iconEnd,\n    isExpandableColumn,\n    width,\n    row,\n    cell,\n    children,\n    isScrollable,\n    ...props\n}) => {\n    const leftMarginBuffer = 20; // px\n    const leftMarginIndentDepth = row?.depth * 20; // px\n    const scrollableClass = isScrollable ? 'moonstone-tableCellContent' : '';\n\n    // TODO: When no iconStart is set we should just render children to avoid too nested HTML elements\n    // TODO: Add iconEnd somewhere or remove it from the props, it seems we never use it\n    const renderCellContent = () => (\n        <IconTextIcon component=\"div\" iconStart={iconStart} typographyProps={{className: clsx(scrollableClass, 'flexFluid')}}>\n            {children}\n        </IconTextIcon>\n    );\n\n\n    const renderTableCell = () => {\n        // These are cells that are in the expandable row (canExpand) and it is the column in\n        // which the cells show the chevron icon to expand and collapse sub-rows (isExpandableColumn)\n        if (isExpandableColumn && row?.canExpand) {\n            return (\n                <TableCell {...row?.getToggleRowExpandedProps({style: {marginLeft: `${leftMarginIndentDepth}px`}})}\n                >\n                    {row?.isExpanded\n                        ? <ChevronDown className=\"moonstone-marginRightNano\"/>\n                        : <ChevronRight className=\"moonstone-marginRightNano\"/>\n                    }\n                    {renderCellContent()}\n                </TableCell>\n            );\n        }\n\n        // These are cells which are in the expandable column (isExpandableColumn), but themselves\n        // do now have sub-rows. Therefore, they need to have the appropriate nested indentation,\n        // but do not have the chevron to expand/collapse rows underneath them.\n        // Also, a buffer of 20px is added so that they are aligned with the cells that do have\n        // the chevron icons for expand/collapse\n        if (isExpandableColumn && !row?.canExpand) {\n            return (\n                <TableCell style={{marginLeft: `${leftMarginIndentDepth + leftMarginBuffer}px`}}>\n                    {renderCellContent()}\n                </TableCell>\n            );\n        }\n\n        // These are just the normal cells in the other columns which don't display anything with\n        // relation to the row expansion feature\n        return <TableCell>{renderCellContent()}</TableCell>;\n    };\n\n    return (\n        <Typography\n            className={clsx(\n                'moonstone-tableBodyCell',\n                'textAlign' + capitalize(textAlign),\n                'moonstone-verticalAlign' + capitalize(verticalAlign),\n                {'flexFluid': typeof width === 'undefined'},\n                className\n            )}\n            component={component}\n            variant=\"body\"\n            style={{'width': width}}\n            {...props}\n        >\n            {renderTableCell()}\n        </Typography>\n    );\n};\n\nTableBodyCell.displayName = 'TableBodyCell';\n"]}