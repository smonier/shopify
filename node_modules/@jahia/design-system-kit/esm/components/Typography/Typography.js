import _capitalize from "lodash/capitalize";
var _excluded = ["root", "noWrap", "gutterBottom", "paragraph"],
  _excluded2 = ["variant", "color", "classes"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
import React from 'react';
import { Typography as MuiTypography, withStyles } from '@material-ui/core';
import classnames from 'classnames';
import PropTypes from 'prop-types';
import PropTypeConstants, { TextVariants } from '../PropTypesConstants';
var styles = function styles(theme) {
  return _objectSpread(_objectSpread({
    root: {},
    noWrap: {},
    gutterBottom: {},
    paragraph: {}
  }, TextVariants.reduce(function (styles, variant) {
    return _objectSpread(_objectSpread({}, styles), {}, _defineProperty({}, variant, theme.typography[variant]));
  }, {})), {}, {
    colorInherit: {
      color: 'inherit'
    },
    colorAlpha: {
      color: theme.palette.font.alpha
    },
    colorBeta: {
      color: theme.palette.font.beta
    },
    colorGamma: {
      color: theme.palette.font.gamma
    },
    colorInvert: {
      color: theme.palette.invert.beta
    },
    colorZeta: {
      color: theme.palette.ui.zeta
    }
  });
};
var getClasses = function getClasses(_ref) {
  var variant = _ref.variant,
    color = _ref.color,
    _ref$classes = _ref.classes,
    root = _ref$classes.root,
    noWrap = _ref$classes.noWrap,
    gutterBottom = _ref$classes.gutterBottom,
    paragraph = _ref$classes.paragraph,
    myClasses = _objectWithoutProperties(_ref$classes, _excluded);
  return {
    root: classnames(root, myClasses[variant], myClasses['color' + _capitalize(color)]),
    noWrap: noWrap,
    gutterBottom: gutterBottom,
    paragraph: paragraph
  };
};
var Typography = withStyles(styles, {
  name: 'DsTypography'
})(function (_ref2) {
  var variant = _ref2.variant,
    color = _ref2.color,
    classes = _ref2.classes,
    props = _objectWithoutProperties(_ref2, _excluded2);
  return /*#__PURE__*/React.createElement(MuiTypography, _extends({
    classes: getClasses({
      variant: variant,
      color: color,
      classes: classes
    })
  }, props));
});
Typography.propTypes = process.env.NODE_ENV !== 'production' ? {
  /**
   * Set the text-align on the component.
   */
  align: PropTypes.oneOf(['inherit', 'left', 'center', 'right', 'justify']),
  /**
   * The content of the component.
   */
  children: PropTypes.node,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css-api) below for more details.
   */
  classes: PropTypes.object,
  /**
   * @ignore
   */
  className: PropTypes.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   */
  color: PropTypeConstants.TextColors,
  /**
   * The component used for the root node.
   * Either a string to use a DOM element or a component.
   * By default, it maps the variant to a good default headline component.
   */
  component: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),
  /**
   * If `true`, the text will have a bottom margin.
   */
  gutterBottom: PropTypes.bool,
  /**
   * We are empirically mapping the variant property to a range of different DOM element types.
   * For instance, subtitle1 to `<h6>`.
   * If you wish to change that mapping, you can provide your own.
   * Alternatively, you can use the `component` property.
   * The default mapping is the following:
   */
  headlineMapping: PropTypes.object,
  /**
   * A deprecated variant is used from an internal component. Users don't need
   * a deprecation warning here if they switched to the v2 theme. They already
   * get the mapping that will be applied in the next major release.
   *
   * @internal
   */
  internalDeprecatedVariant: PropTypes.bool,
  /**
   * If `true`, the text will not wrap, but instead will truncate with an ellipsis.
   */
  noWrap: PropTypes.bool,
  /**
   * If `true`, the text will have a bottom margin.
   */
  paragraph: PropTypes.bool,
  /**
   * Applies the theme typography styles.
   * Use `body1` as the default value with the legacy implementation and `body2` with the new one.
   */
  variant: PropTypeConstants.TextVariants
} : {};
Typography.defaultProps = {
  align: undefined,
  classes: undefined,
  color: 'alpha',
  gutterBottom: undefined,
  headlineMapping: undefined,
  noWrap: undefined,
  paragraph: undefined,
  variant: 'iota'
};
Typography.displayName = 'DsTypography';
export default Typography;