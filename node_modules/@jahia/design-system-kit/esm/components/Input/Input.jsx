var _excluded = ["classes", "disabled", "error", "onBlur", "onFocus", "readOnly", "variant"],
  _excluded2 = ["readOnly", "inputDisabled", "inputAdornedStart", "inputAdornedStartFocus", "inputAdornedStartError", "inputAdornedEnd", "inputAdornedEndReadonly"],
  _excluded3 = ["value", "isInputControlled"],
  _excluded4 = ["decimalSeparator", "decimalScale", "type"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { useState } from 'react';
import PropTypes from 'prop-types';
import { InputBase, InputAdornment, withStyles } from '@material-ui/core';
import NumberFormat from 'react-number-format';
var styles = function styles(theme) {
  return {
    root: {
      borderRadius: '1px',
      background: theme.palette.ui.epsilon,
      border: "1px solid ".concat(theme.palette.ui.omega),
      boxSizing: 'border-box',
      '&:hover:not($inputDisabled):not($focused):not($error):not($readOnly)': {
        border: "1px solid ".concat(theme.palette.ui.zeta)
      },
      fontSize: theme.typography.iota.fontSize,
      transitionDuration: '.3s',
      padding: '3px 0px 3px 12px'
    },
    focused: {
      border: "1px solid ".concat(theme.palette.brand.beta)
    },
    readOnly: {
      background: theme.palette.ui.alpha,
      border: "1px solid ".concat(theme.palette.ui.alpha)
    },
    // Hack for disabled style as the default disabled style applies on both container AND input element.
    inputDisabled: {
      background: theme.palette.ui.epsilon,
      border: "1px solid ".concat(theme.palette.ui.zeta),
      color: theme.palette.font.gamma
    },
    error: {
      border: "1px solid ".concat(theme.palette.support.alpha)
    },
    inputAdornedStart: {
      transitionDuration: '.3s'
    },
    inputAdornedStartFocus: {
      color: theme.palette.brand.beta
    },
    inputAdornedStartError: {
      color: theme.palette.support.alpha
    },
    inputAdornedEnd: {
      marginRight: '8px',
      cursor: 'pointer'
    },
    inputAdornedEndReadonly: {
      pointerEvents: 'none !important'
    }
  };
};
var InputCmp = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var classes = _ref.classes,
    disabled = _ref.disabled,
    error = _ref.error,
    onBlur = _ref.onBlur,
    onFocus = _ref.onFocus,
    readOnly = _ref.readOnly,
    variant = _ref.variant,
    others = _objectWithoutProperties(_ref, _excluded);
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    focus = _useState2[0],
    setFocus = _useState2[1];
  var handleFocus = function handleFocus(e) {
    onFocus(e);
    setFocus(true);
  };
  var handleBlur = function handleBlur(e) {
    onBlur(e);
    setFocus(false);
  };
  var icon = variant.icon,
    interactive = variant.interactive;
  var readOnlyClass = classes.readOnly,
    inputDisabled = classes.inputDisabled,
    inputAdornedStart = classes.inputAdornedStart,
    inputAdornedStartFocus = classes.inputAdornedStartFocus,
    inputAdornedStartError = classes.inputAdornedStartError,
    inputAdornedEnd = classes.inputAdornedEnd,
    inputAdornedEndReadonly = classes.inputAdornedEndReadonly,
    containerClasses = _objectWithoutProperties(classes, _excluded2);
  return /*#__PURE__*/React.createElement(InputBase, _extends({
    ref: ref,
    classes: containerClasses,
    className: "".concat(readOnly ? readOnlyClass : '', " ").concat(disabled ? inputDisabled : ''),
    disabled: disabled,
    error: error,
    readOnly: readOnly,
    startAdornment: icon && /*#__PURE__*/React.createElement(InputAdornment, {
      className: "".concat(inputAdornedStart, " ").concat(!readOnly && focus ? inputAdornedStartFocus : '', " ").concat(!readOnly && error ? inputAdornedStartError : ''),
      position: "start"
    }, icon),
    endAdornment: interactive && /*#__PURE__*/React.createElement(InputAdornment, {
      className: "".concat(inputAdornedEnd, " ").concat(readOnly ? inputAdornedEndReadonly : ''),
      position: "end"
    }, interactive),
    onBlur: handleBlur,
    onFocus: handleFocus
  }, others));
});
var ValueForwardInputCmp = /*#__PURE__*/React.forwardRef(function (_ref2, ref) {
  var value = _ref2.value,
    isInputControlled = _ref2.isInputControlled,
    others = _objectWithoutProperties(_ref2, _excluded3);
  return /*#__PURE__*/React.createElement(InputCmp, _extends({
    ref: ref,
    value: isInputControlled ? value : undefined,
    defaultValue: !isInputControlled ? value : undefined
  }, others));
});
ValueForwardInputCmp.propTypes = {
  isInputControlled: PropTypes.bool.isRequired,
  value: PropTypes.string
};
ValueForwardInputCmp.defaultProps = {
  value: undefined
};
var WrappedInputCmp = /*#__PURE__*/React.forwardRef(function (_ref3, ref) {
  var decimalSeparator = _ref3.decimalSeparator,
    decimalScale = _ref3.decimalScale,
    type = _ref3.type,
    others = _objectWithoutProperties(_ref3, _excluded4);
  if (type && type === 'number') {
    return /*#__PURE__*/React.createElement(NumberFormat, _extends({
      ref: ref,
      isInputControlled: others.value !== undefined,
      customInput: ValueForwardInputCmp,
      decimalScale: decimalScale,
      decimalSeparator: decimalSeparator
    }, others));
  }
  return /*#__PURE__*/React.createElement(InputCmp, _extends({
    ref: ref,
    type: type
  }, others));
});
InputCmp.defaultProps = {
  disabled: false,
  defaultValue: undefined,
  error: false,
  fullWidth: false,
  inputProps: {},
  id: undefined,
  name: undefined,
  onBlur: function onBlur() {},
  onChange: function onChange() {},
  onFocus: function onFocus() {},
  readOnly: false,
  value: undefined,
  variant: {}
};
InputCmp.propTypes = {
  classes: PropTypes.object.isRequired,
  defaultValue: PropTypes.string,
  // eslint-disable-next-line react/boolean-prop-naming
  disabled: PropTypes.bool,
  // eslint-disable-next-line react/boolean-prop-naming
  error: PropTypes.bool,
  // eslint-disable-next-line react/boolean-prop-naming
  fullWidth: PropTypes.bool,
  id: PropTypes.string,
  inputProps: PropTypes.object,
  name: PropTypes.string,
  onBlur: PropTypes.func,
  onChange: PropTypes.func,
  onFocus: PropTypes.func,
  // eslint-disable-next-line react/boolean-prop-naming
  readOnly: PropTypes.bool,
  value: PropTypes.string,
  variant: PropTypes.shape({
    icon: PropTypes.node,
    interactive: PropTypes.node
  })
};
WrappedInputCmp.defaultProps = {
  decimalSeparator: '.',
  decimalScale: undefined,
  type: 'text'
};
WrappedInputCmp.propTypes = {
  decimalSeparator: PropTypes.string,
  decimalScale: PropTypes.number,
  type: PropTypes.string
};
export var Input = withStyles(styles)(WrappedInputCmp);
Input.displayName = 'Input';