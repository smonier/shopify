import _capitalize from "lodash/capitalize";
var _excluded = ["root", "icon", "deleteIcon"],
  _excluded2 = ["variant", "color", "size", "classes"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React from 'react';
import { Chip as MuiChip, withStyles } from '@material-ui/core';
import classnames from 'classnames';
import PropTypesConstants from '../PropTypesConstants';
var styles = function styles(theme) {
  return {
    root: {
      borderRadius: '4px'
    },
    primary: {
      background: theme.palette.brand.beta,
      color: theme.palette.invert.beta
    },
    iconPrimary: {
      color: theme.palette.invert.beta
    },
    secondary: {
      background: 'transparent',
      color: theme.palette.font.alpha
    },
    iconSecondary: {
      color: theme.palette.font.alpha
    },
    colorInverted: {
      color: theme.palette.invert.beta
    },
    deleteIcon: {
      color: theme.palette.ui.omega
    },
    sizeNormal: {
      // Todo normal size CSS
    },
    sizeCompact: {
      // Todo compact size CSS
    }
  };
};
var getClasses = function getClasses(_ref) {
  var variant = _ref.variant,
    color = _ref.color,
    size = _ref.size,
    _ref$classes = _ref.classes,
    root = _ref$classes.root,
    icon = _ref$classes.icon,
    deleteIcon = _ref$classes.deleteIcon,
    myClasses = _objectWithoutProperties(_ref$classes, _excluded);
  return {
    root: classnames(root, myClasses[variant], myClasses['color' + _capitalize(color)], myClasses['size' + _capitalize(size)]),
    icon: classnames(icon, myClasses['icon' + _capitalize(variant)]),
    deleteIcon: deleteIcon
  };
};
var Chip = withStyles(styles, {
  name: 'DsChip'
})(function (_ref2) {
  var variant = _ref2.variant,
    color = _ref2.color,
    size = _ref2.size,
    classes = _ref2.classes,
    props = _objectWithoutProperties(_ref2, _excluded2);
  return /*#__PURE__*/React.createElement(MuiChip, _extends({
    classes: getClasses({
      variant: variant,
      color: color,
      size: size,
      classes: classes
    })
  }, props));
});
Chip.propTypes = process.env.NODE_ENV !== 'production' ? {
  size: PropTypesConstants.ChipSizes,
  color: PropTypesConstants.ChipColors,
  variant: PropTypesConstants.ChipVariants
} : {};
Chip.defaultProps = {
  color: 'default',
  variant: 'primary',
  size: 'normal'
};
Chip.displayName = 'DsChip';
export default Chip;