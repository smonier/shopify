var _excluded = ["classes", "checked", "disabled", "readOnly", "onChange", "onFocus", "onBlur"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
import React, { useState } from 'react';
import Switch from '@material-ui/core/Switch';
import PropTypes from 'prop-types';
import { withStyles } from '@material-ui/core/styles';
var styles = function styles(theme) {
  // Todo: DESIGN-178 - use theme colors
  theme.palette.ui.zeta = '#C1C8D5';
  var switchBase = {
    '&$checked + $bar': {
      opacity: 0.5,
      backgroundColor: theme.palette.brand.gamma
    }
  };
  var hoverSwitchBase = {
    '&:hover $icon': {
      color: theme.palette.hover.beta
    },
    '&$checked:hover $iconChecked': {
      color: theme.palette.brand.alpha
    },
    '&$checked:hover + $bar': {
      opacity: 1
    }
  };
  return {
    root: {
      marginLeft: -(theme.spacing.unit + 3)
    },
    icon: {
      color: theme.palette.ui.epsilon,
      border: "1px solid ".concat(theme.palette.ui.zeta),
      boxShadow: '0px 2px 2px rgba(0, 0, 0, 0.3)',
      boxSizing: 'border-box'
    },
    iconChecked: {
      color: theme.palette.brand.beta,
      border: 'none'
    },
    switchBase: _objectSpread(_objectSpread({}, switchBase), hoverSwitchBase),
    focusedSwitchBase: _objectSpread(_objectSpread(_objectSpread({}, switchBase), hoverSwitchBase), {}, {
      '&::before': {
        position: 'absolute',
        width: '32px',
        height: '32px',
        borderRadius: '50%',
        zIndex: '-1',
        content: '""',
        background: theme.palette.ui.delta,
        opacity: '0.2',
        boxShadow: '0px 2px 2px rgba(0, 0, 0, 0.3)'
      },
      '&$checked::before': {
        background: theme.palette.brand.beta
      },
      '& $icon': {
        boxShadow: 'none'
      }
    }),
    readOnlySwitchBase: _objectSpread(_objectSpread({}, switchBase), {}, {
      boxShadow: 'none !important',
      pointerEvents: 'none !important',
      '&$checked $iconChecked': {
        color: theme.palette.brand.gamma
      },
      '& $icon': {
        boxShadow: 'none'
      }
    }),
    disabledSwitchBase: {
      boxShadow: 'none !important',
      pointerEvents: 'none !important',
      '&$checked $iconChecked': {
        color: theme.palette.ui.delta
      },
      '& $icon': {
        boxShadow: 'none'
      },
      '&$checked + $bar': {
        opacity: 0.5,
        backgroundColor: theme.palette.ui.delta
      },
      '& + $bar': {
        backgroundColor: theme.palette.font.gamma
      }
    },
    bar: {
      backgroundColor: theme.palette.ui.zeta
    },
    checked: {}
  };
};
var ToggleCmp = function ToggleCmp(_ref) {
  var classes = _ref.classes,
    checked = _ref.checked,
    disabled = _ref.disabled,
    readOnly = _ref.readOnly,
    onChange = _ref.onChange,
    onFocus = _ref.onFocus,
    onBlur = _ref.onBlur,
    others = _objectWithoutProperties(_ref, _excluded);
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    focus = _useState2[0],
    setFocus = _useState2[1];
  var handleFocus = function handleFocus() {
    onFocus();
    setFocus(true);
  };
  var handleBlur = function handleBlur() {
    onBlur();
    setFocus(false);
  };
  var readOnlyProps = readOnly ? {
    tabindex: '0' // Allow the user to focus the field in case of readonly, even if it cannot modify the value
  } : {};
  var getSwitchBaseClass = function getSwitchBaseClass() {
    if (disabled) {
      return classes.disabledSwitchBase;
    }
    if (readOnly) {
      return classes.readOnlySwitchBase;
    }
    if (focus) {
      return classes.focusedSwitchBase;
    }
    return classes.switchBase;
  };
  return /*#__PURE__*/React.createElement(Switch, _extends({
    disableRipple: true,
    classes: {
      root: classes.root,
      icon: classes.icon,
      iconChecked: classes.iconChecked,
      switchBase: getSwitchBaseClass(),
      bar: classes.bar,
      checked: classes.checked
    },
    checked: checked,
    disabled: disabled || readOnly,
    onChange: onChange,
    onFocus: handleFocus,
    onBlur: handleBlur
  }, others, readOnlyProps));
};
ToggleCmp.defaultProps = {
  classes: {},
  checked: false,
  disabled: false,
  readOnly: false,
  onChange: function onChange() {},
  onFocus: function onFocus() {},
  onBlur: function onBlur() {}
};
ToggleCmp.propTypes = {
  classes: PropTypes.object,
  // eslint-disable-next-line react/boolean-prop-naming
  checked: PropTypes.bool,
  // eslint-disable-next-line react/boolean-prop-naming
  disabled: PropTypes.bool,
  // eslint-disable-next-line react/boolean-prop-naming
  readOnly: PropTypes.bool,
  onChange: PropTypes.func,
  onFocus: PropTypes.func,
  onBlur: PropTypes.func
};
export var Toggle = withStyles(styles)(ToggleCmp);