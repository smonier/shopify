var _excluded = ["root", "expanded", "disabled", "focused", "expandIcon", "content"],
  _excluded2 = ["variant", "classes", "focused", "content", "expanded", "disabled"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React from 'react';
import classnames from 'classnames';
import PropTypes from 'prop-types';
/* Wrapped component */
import { ExpansionPanelSummary as MuiExpansionPanelSummary, withStyles } from '@material-ui/core';

/* Styles applied in the component.
* root: the style of the component itself
* attributeValue: when an attribute is set
*/
var styles = function styles(theme) {
  return {
    root: {
      display: 'flex',
      minHeight: 8 * 6,
      padding: theme.spacing.unit + 'px ' + theme.spacing.unit * 4 + 'px ' + theme.spacing.unit + 'px ' + theme.spacing.unit * 4 + 'px',
      borderRadius: 1,
      '&:hover:not($disabled)': {
        cursor: 'pointer'
      },
      '&$expanded': {
        minHeight: 64
      },
      '&$focused': {},
      '&$disabled': {
        opacity: 0.38
      }
    },
    expandIcon: {
      color: 'inherit'
    },
    disabled: {},
    expanded: {},
    focused: {
      backgroundColor: theme.palette.ui.omega
    },
    content: {
      display: 'flex',
      flexGrow: 1,
      margin: '26px 0',
      '& > :last-child': {
        paddingRight: theme.spacing.unit * 4
      },
      '&$expanded': {
        margin: '28px 0'
      }
    }
  };
};

/*
   Set custom classes of component
 */
var getClasses = function getClasses(_ref) {
  var variant = _ref.variant,
    _ref$classes = _ref.classes,
    root = _ref$classes.root,
    expanded = _ref$classes.expanded,
    disabled = _ref$classes.disabled,
    focused = _ref$classes.focused,
    expandIcon = _ref$classes.expandIcon,
    content = _ref$classes.content,
    dsClasses = _objectWithoutProperties(_ref$classes, _excluded);
  return {
    root: classnames(root, dsClasses[variant]),
    expanded: expanded,
    disabled: disabled,
    expandIcon: expandIcon,
    focused: focused,
    content: content
  };
};

/*
   Spread new classes into original component
 */
var ExpansionPanelSummary = withStyles(styles, {
  name: 'DsExpansionPanelSummary'
})(function (_ref2) {
  var variant = _ref2.variant,
    classes = _ref2.classes,
    focused = _ref2.focused,
    content = _ref2.content,
    expanded = _ref2.expanded,
    disabled = _ref2.disabled,
    props = _objectWithoutProperties(_ref2, _excluded2);
  return /*#__PURE__*/React.createElement(MuiExpansionPanelSummary, _extends({
    classes: getClasses({
      variant: variant,
      expanded: expanded,
      disabled: disabled,
      focused: focused,
      content: content,
      classes: classes
    })
  }, props));
});

/*
  Proptype of component
 */
ExpansionPanelSummary.propTypes = process.env.NODE_ENV !== 'production' ? {
  children: PropTypes.node,
  classes: PropTypes.object,
  className: PropTypes.string,
  disabled: PropTypes.bool,
  expanded: PropTypes.bool,
  expandIcon: PropTypes.node,
  IconButtonProps: PropTypes.object,
  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
  onBlur: PropTypes.func,
  onChange: PropTypes.func,
  onClick: PropTypes.func,
  onFocusVisible: PropTypes.func
} : {};

/*
   Default Props
 */
ExpansionPanelSummary.defaultProps = {
  disabled: false
};
ExpansionPanelSummary.displayName = 'DsExpansionPanelSummary';
ExpansionPanelSummary.muiName = 'ExpansionPanelSummary';
export default ExpansionPanelSummary;