function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import PropTypes from 'prop-types';
import React from 'react';
import { withStyles } from '@material-ui/core';
import { Typography } from '../Typography';
import { compose } from 'recompose';
import styleConstants from '../../theme/styleConstants';
var styles = function styles(theme) {
  return {
    root: {
      display: 'flex',
      justifyContent: 'space-between',
      alignItems: 'center',
      padding: '0px ' + theme.spacing.unit * 3 + 'px',
      height: styleConstants.topBarHeight + 'px'
    },
    typoTitle: {
      whiteSpace: 'nowrap',
      textOverflow: 'ellipsis',
      overflow: 'hidden',
      minWidth: 0,
      maxWidth: '50vw'
    },
    head: {
      display: 'inline-block',
      verticalAlign: 'top',
      marginRight: 'auto'
    },
    topBarActions: {
      flex: '4 1 0%',
      width: 'min-content',
      minWidth: 'max-content',
      display: 'flex',
      justifyContent: 'flex-end'
    },
    topBarTitle: {
      overflow: 'hidden'
    },
    topBarContext: {
      flex: '1 1 auto',
      display: 'flex',
      flexDirection: 'column',
      overflow: 'hidden',
      minWidth: 0,
      '& button': {
        margin: '0px',
        padding: '0px'
      }
    }
  };
};
export var TopBar = function TopBar(_ref) {
  var classes = _ref.classes,
    title = _ref.title,
    titleProps = _ref.titleProps,
    contextModifiers = _ref.contextModifiers,
    path = _ref.path,
    actions = _ref.actions;
  return /*#__PURE__*/React.createElement("div", {
    className: classes.root,
    "data-sel-role": "top-bar"
  }, /*#__PURE__*/React.createElement("div", {
    className: classes.topBarContext
  }, /*#__PURE__*/React.createElement("div", null, typeof path === 'string' ? /*#__PURE__*/React.createElement(Typography, {
    noWrap: true,
    gutterBottom: true,
    variant: "omega",
    color: "invert"
  }, path) : path), /*#__PURE__*/React.createElement("div", {
    className: classes.topBarTitle
  }, /*#__PURE__*/React.createElement(Typography, _extends({
    gutterBottom: true,
    variant: "beta",
    color: "invert",
    className: classes.typoTitle,
    "data-sel-role": "top-bar-title",
    component: "h2"
  }, titleProps), title)), /*#__PURE__*/React.createElement("div", null, contextModifiers)), actions && /*#__PURE__*/React.createElement("div", {
    className: classes.topBarActions
  }, actions));
};
TopBar.propTypes = {
  actions: PropTypes.object,
  classes: PropTypes.object.isRequired,
  contextModifiers: PropTypes.node.isRequired,
  path: PropTypes.node,
  title: PropTypes.string.isRequired,
  titleProps: PropTypes.object
};
TopBar.defaultProps = {
  actions: null,
  path: null,
  titleProps: {}
};
export default compose(withStyles(styles))(TopBar);