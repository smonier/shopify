import _capitalize from "lodash/capitalize";
var _excluded = ["root", "select", "selectMenu", "icon", "disabled"],
  _excluded2 = ["variant", "color", "classes"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React from 'react';
import classnames from 'classnames';
/* Wrapped component */
import { Select as MuiSelect, withStyles } from '@material-ui/core';
import PropTypeConstants from '../PropTypesConstants';
/* Styles applied in the component.
* root: the style of the component itself
* attributeValue: when an attribute is set
*/
var styles = function styles(theme) {
  return {
    root: {},
    normal: {},
    ghost: {
      '& $select': {
        color: theme.palette.brand.alpha,
        backgroundColor: 'transparent'
      },
      '& $select:focus': {
        boxShadow: 'unset'
      },
      '& $icon': {
        color: theme.palette.brand.alpha
      }
    },
    colorInverted: {},
    colorDefault: {},
    select: {
      '&:focus': {
        backgroundColor: 'transparent'
      }
    },
    selectMenu: {},
    icon: {
      top: 'calc(50% - 10px)'
    },
    disabled: {}
  };
};

/*
   Set custom classes of component
 */
var getClasses = function getClasses(_ref) {
  var variant = _ref.variant,
    color = _ref.color,
    _ref$classes = _ref.classes,
    root = _ref$classes.root,
    select = _ref$classes.select,
    selectMenu = _ref$classes.selectMenu,
    icon = _ref$classes.icon,
    disabled = _ref$classes.disabled,
    dsClasses = _objectWithoutProperties(_ref$classes, _excluded);
  return {
    root: classnames(root, dsClasses[variant], dsClasses['color' + _capitalize(color)]),
    select: select,
    selectMenu: selectMenu,
    icon: icon,
    disabled: disabled
  };
};

/*
   Spread new classes into original component
 */
var Select = withStyles(styles, {
  name: 'DsSelect'
})(function (_ref2) {
  var variant = _ref2.variant,
    color = _ref2.color,
    classes = _ref2.classes,
    props = _objectWithoutProperties(_ref2, _excluded2);
  return /*#__PURE__*/React.createElement(MuiSelect, _extends({
    disableUnderline: true,
    classes: getClasses({
      variant: variant,
      color: color,
      classes: classes
    })
  }, props));
});

/*
  Proptype of component
 */
Select.propTypes = process.env.NODE_ENV !== 'production' ? {
  color: PropTypeConstants.SelectColors,
  variant: PropTypeConstants.SelectVariants
} : {};

/*
   Default Props
 */
Select.defaultProps = {
  autoWidth: false,
  displayEmpty: false,
  multiple: false,
  "native": false
};
Select.displayName = 'DsSelect';
export default Select;