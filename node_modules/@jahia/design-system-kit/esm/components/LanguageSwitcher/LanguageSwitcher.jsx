import _find from "lodash/find";
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import PropTypes from 'prop-types';
import React, { useState } from 'react';
import { Menu, MenuItem } from '@material-ui/core';
import { Button } from '../Button';
import { Typography } from '../Typography';
import { ChevronDown } from 'mdi-material-ui';
var LanguageSwitcher = function LanguageSwitcher(_ref) {
  var color = _ref.color,
    lang = _ref.lang,
    languages = _ref.languages,
    onSelectLanguage = _ref.onSelectLanguage;
  var _useState = useState(null),
    _useState2 = _slicedToArray(_useState, 2),
    anchorEl = _useState2[0],
    setAnchorEl = _useState2[1];
  var handleClick = function handleClick(event) {
    setAnchorEl(event.currentTarget);
  };
  var handleClose = function handleClose() {
    setAnchorEl(null);
  };
  var uppercaseFirst = function uppercaseFirst(string) {
    return string.charAt(0).toUpperCase() + string.substr(1);
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, languages.length > 1 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {
    "aria-owns": anchorEl ? 'language-switcher' : null,
    "aria-haspopup": "true",
    "data-cm-role": "language-switcher",
    size: "compact",
    color: color,
    onClick: handleClick
  }, /*#__PURE__*/React.createElement(Typography, {
    noWrap: true,
    variant: "zeta",
    color: "inherit"
  }, uppercaseFirst(_find(languages, function (language) {
    return language.language === lang;
  }).displayName), "\xA0"), /*#__PURE__*/React.createElement(ChevronDown, {
    fontSize: "small",
    color: "inherit"
  })), /*#__PURE__*/React.createElement(Menu, {
    id: "language-switcher",
    anchorEl: anchorEl,
    open: Boolean(anchorEl),
    onClose: handleClose
  }, languages.map(function (language) {
    return /*#__PURE__*/React.createElement(MenuItem, {
      key: language.language,
      selected: language.language === lang,
      onClick: function onClick() {
        onSelectLanguage(language.language);
        handleClose();
      }
    }, uppercaseFirst(language.displayName));
  }))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {
    "aria-owns": anchorEl ? 'language-switcher' : null,
    "aria-haspopup": "true",
    "data-cm-role": "language-switcher",
    size: "compact",
    color: color,
    onClick: handleClick
  }, /*#__PURE__*/React.createElement(Typography, {
    noWrap: true,
    variant: "zeta",
    color: "inherit"
  }, uppercaseFirst(_find(languages, function (language) {
    return language.language === lang;
  }).displayName), "\xA0"))));
};
LanguageSwitcher.propTypes = {
  color: PropTypes.string,
  lang: PropTypes.string.isRequired,
  languages: PropTypes.arrayOf(PropTypes.object).isRequired,
  onSelectLanguage: PropTypes.func.isRequired
};
LanguageSwitcher.defaultProps = {
  color: 'default'
};
LanguageSwitcher.displayName = 'LanguageSwitcher';
export default LanguageSwitcher;