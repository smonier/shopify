import _lodash from "lodash/lodash";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
import PropTypes from 'prop-types';
import { List, ListItem, Typography, withStyles } from '@material-ui/core';
import { ChevronRight, ExpandMore } from '@material-ui/icons';
import React from 'react';
import { DisplayActions, toIconComponent } from '@jahia/react-material';
import { compose } from 'recompose';
var styles = function styles(theme) {
  return {
    expand: {
      width: theme.spacing.unit * 3 + 'px'
    },
    nested: {
      paddingLeft: theme.spacing.unit
    }
  };
};
export var LeftDrawerListItems = function LeftDrawerListItems(_ref) {
  var context = _ref.context,
    actionPath = _ref.actionPath,
    classes = _ref.classes;
  return /*#__PURE__*/React.createElement(DisplayActions, {
    target: context.menu,
    context: _objectSpread(_objectSpread({}, context.originalContext), {}, {
      parent: context
    }),
    render: function render(actionProps) {
      var actionContext = actionProps.context;
      var icon = actionContext.buttonIcon;
      actionContext.actionPath = actionPath + '/' + actionContext.key;
      icon = toIconComponent(icon, {
        fontSize: 'small'
      });
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListItem, {
        button: true,
        selected: _lodash.includes(_lodash.split(actionPath, '/'), actionContext.actionKey),
        onClick: function onClick(event) {
          if (!actionContext.hasChildren) {
            context.drawer.handleDrawerClose();
          }
          actionContext.onClick(actionContext, event);
        }
      }, /*#__PURE__*/React.createElement("div", {
        className: classes.expand
      }, actionContext.hasChildren ? actionContext.open || actionContext.selected ? /*#__PURE__*/React.createElement(ExpandMore, {
        fontSize: "small"
      }) : /*#__PURE__*/React.createElement(ChevronRight, {
        fontSize: "small"
      }) : null), icon, "\xA0", /*#__PURE__*/React.createElement(Typography, {
        color: "textPrimary"
      }, actionContext.buttonLabel)), /*#__PURE__*/React.createElement(List, {
        disablePadding: true,
        classes: {
          root: classes.nested
        }
      }, actionContext.menu && actionContext.open && /*#__PURE__*/React.createElement(LeftDrawerListItems, {
        context: actionContext,
        actionPath: actionPath + '/' + actionContext.key,
        classes: classes
      })));
    }
  });
};
LeftDrawerListItems.propTypes = {
  actionPath: PropTypes.string.isRequired,
  context: PropTypes.object.isRequired,
  classes: PropTypes.object.isRequired
};
export default compose(withStyles(styles))(LeftDrawerListItems);