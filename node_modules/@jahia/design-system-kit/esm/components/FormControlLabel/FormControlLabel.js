import _capitalize from "lodash/capitalize";
var _excluded = ["root", "labelPlacementStart", "labelPlacementTop", "labelPlacementBottom", "disabled", "label"],
  _excluded2 = ["variant", "color", "classes"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React from 'react';
import { FormControlLabel as MuiFormControlLabel, withStyles } from '@material-ui/core';
import classnames from 'classnames';
var styles = function styles() {
  return {
    /* Styles applied to the root element. */
    root: {},
    /* Styles applied to the root element if `labelPlacement="start"`. */
    labelPlacementStart: {},
    /* Styles applied to the root element if `labelPlacement="top"`. */
    labelPlacementTop: {},
    /* Styles applied to the root element if `labelPlacement="bottom"`. */
    labelPlacementBottom: {},
    /* Styles applied to the root element if `disabled={true}`. */
    disabled: {
      '& svg': {
        opacity: 1
      }
    },
    /* Styles applied to the label's Typography component. */
    label: {}
  };
};
var getClasses = function getClasses(_ref) {
  var variant = _ref.variant,
    color = _ref.color,
    _ref$classes = _ref.classes,
    root = _ref$classes.root,
    labelPlacementStart = _ref$classes.labelPlacementStart,
    labelPlacementTop = _ref$classes.labelPlacementTop,
    labelPlacementBottom = _ref$classes.labelPlacementBottom,
    disabled = _ref$classes.disabled,
    label = _ref$classes.label,
    myClasses = _objectWithoutProperties(_ref$classes, _excluded);
  return {
    root: classnames(root, myClasses[variant], myClasses['color' + _capitalize(color)]),
    labelPlacementStart: labelPlacementStart,
    labelPlacementTop: labelPlacementTop,
    labelPlacementBottom: labelPlacementBottom,
    disabled: disabled,
    label: label
  };
};
var FormControlLabel = withStyles(styles, {
  name: 'DsFormControlLabel'
})(function (_ref2) {
  var variant = _ref2.variant,
    color = _ref2.color,
    classes = _ref2.classes,
    props = _objectWithoutProperties(_ref2, _excluded2);
  return /*#__PURE__*/React.createElement(MuiFormControlLabel, _extends({
    classes: getClasses({
      variant: variant,
      color: color,
      classes: classes
    })
  }, props));
});
FormControlLabel.propTypes = process.env.NODE_ENV !== 'production' ? {} : {};
FormControlLabel.defaultProps = {
  labelPlacement: 'end'
};
FormControlLabel.displayName = 'DsFormControlLabel';
export default FormControlLabel;