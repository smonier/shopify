import _capitalize from "lodash/capitalize";
var _excluded = ["root", "disableRipple"],
  _excluded2 = ["variant", "color", "size", "classes", "icon"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React from 'react';
import classnames from 'classnames';
import PropTypes from 'prop-types';
import PropTypeConstants from '../PropTypesConstants';
/* Wrapped component */
import { IconButton as MuiIconButton, withStyles } from '@material-ui/core';

/* Styles applied in the component.
* root: the style of the component itself
* attributeValue: when an attribute is set
*/
var styles = function styles(theme) {
  return {
    root: {
      textAlign: 'center',
      flex: '0 0 auto',
      fontSize: theme.typography.delta.fontSize,
      padding: 7,
      margin: '0px ' + theme.spacing.unit + 'px',
      borderRadius: '50%',
      overflow: 'visible',
      color: theme.palette.font.alpha,
      transition: theme.transitions.create('background-color', {
        duration: theme.transitions.duration.shortest
      }),
      '&:hover': {
        '@media (hover: none)': {
          backgroundColor: 'transparent'
        }
      }
    },
    normal: {
      backgroundColor: theme.palette.brand.alpha,
      color: theme.palette.invert.beta,
      '&:hover': {
        backgroundColor: theme.palette.brand.beta
      }
    },
    ghost: {
      backgroundColor: 'transparent'
    },
    colorDefault: {
      color: theme.palette.font.alpha
    },
    colorInverted: {
      color: theme.palette.invert.beta
    },
    sizeCompact: {
      padding: 6
    },
    icon: {
      color: theme.palette.type === 'light' ? theme.palette.grey[700] : theme.palette.grey[300],
      marginLeft: 4,
      marginRight: -8
    },
    iconSizeCompact: {
      fontSize: theme.typography.zeta.fontSize
    },
    iconSizeNormal: {
      fontSize: theme.typography.delta.fontSize
    },
    sizeNormal: {
      padding: 7
    },
    label: {
      width: '100%',
      display: 'flex',
      alignItems: 'inherit',
      justifyContent: 'inherit'
    }
  };
};

/*
   Set custom classes of component
 */
var getClasses = function getClasses(_ref) {
  var variant = _ref.variant,
    color = _ref.color,
    size = _ref.size,
    _ref$classes = _ref.classes,
    root = _ref$classes.root,
    disableRipple = _ref$classes.disableRipple,
    dsClasses = _objectWithoutProperties(_ref$classes, _excluded);
  return {
    root: classnames(root, dsClasses[variant], dsClasses['color' + _capitalize(color)], dsClasses['size' + _capitalize(size)]),
    disableRipple: disableRipple
  };
};

/*
   Spread new classes into original component
 */

var IconButton = withStyles(styles, {
  name: 'DsIconButton'
})(function (_ref2) {
  var variant = _ref2.variant,
    color = _ref2.color,
    size = _ref2.size,
    classes = _ref2.classes,
    icon = _ref2.icon,
    props = _objectWithoutProperties(_ref2, _excluded2);
  return /*#__PURE__*/React.createElement(MuiIconButton, _extends({
    classes: getClasses({
      variant: variant,
      color: color,
      size: size,
      classes: classes
    })
  }, props), icon);
});

/*
    Proptype of component
 */
IconButton.propTypes = process.env.NODE_ENV !== 'production' ? {
  /**
   * The icon element.
   */
  icon: PropTypes.node.isRequired,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css-api) below for more details.
   */
  classes: PropTypes.object,
  /**
   * @ignore
   */
  className: PropTypes.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   */
  color: PropTypeConstants.IconButtonColors,
  /**
   * If `true`, the button will be disabled.
   */
  disabled: PropTypes.bool,
  /**
   * If `true`, the ripple will be disabled.
   */
  disableRipple: PropTypes.bool,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   */
  variant: PropTypeConstants.IconButtonVariants,
  /**
   * The size of the component
   */
  size: PropTypeConstants.IconButtonSizes
} : {};

/*

 */
IconButton.defaultProps = {
  align: undefined,
  classes: undefined,
  color: 'default',
  disableRipple: false,
  disabled: false,
  variant: 'ghost',
  size: 'normal'
};
IconButton.displayName = 'DsIconButton';
export default IconButton;