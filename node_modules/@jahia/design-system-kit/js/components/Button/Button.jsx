"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _capitalize2 = _interopRequireDefault(require("lodash/capitalize"));
var _react = _interopRequireDefault(require("react"));
var _core = require("@material-ui/core");
var _classnames = _interopRequireDefault(require("classnames"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _PropTypesConstants = _interopRequireDefault(require("../PropTypesConstants"));
var _excluded = ["root", "label", "focusVisible", "disabled", "fullWidth"],
  _excluded2 = ["variant", "color", "size", "classes", "icon", "children"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var styles = function styles(theme) {
  return {
    root: {
      borderRadius: 1,
      letterSpacing: 0,
      fontWeight: 600,
      lineHeight: 1.25,
      margin: '0 8px',
      '-webkit-font-smoothing': 'antialiased',
      '-moz-osx-font-smoothing': 'grayscale'
    },
    label: {},
    focusVisible: {},
    disabled: {},
    fullWidth: {},
    primary: {
      background: theme.palette.brand.alpha,
      boxShadow: '0px 1px 2px rgba(0, 0, 0, 0.3)',
      color: theme.palette.invert.beta,
      '&:hover': {
        background: theme.palette.brand.alpha,
        boxShadow: '0px 1px 3px rgba(0, 0, 0, 0.3)',
        color: theme.palette.invert.beta
      }
    },
    secondary: {
      border: '1px solid ' + theme.palette.brand.alpha,
      boxSizing: 'border-box',
      background: 'transparent',
      color: theme.palette.brand.alpha,
      '&:hover': {
        border: '1px solid ' + theme.palette.brand.alpha,
        boxSizing: 'border-box',
        background: 'transparent',
        color: theme.palette.brand.alpha
      }
    },
    ghost: {
      color: theme.palette.brand.alpha
    },
    colorInverted: {
      color: theme.palette.invert.beta
    },
    sizeNormal: {
      fontSize: 14,
      padding: theme.spacing.unit + 'px ' + theme.spacing.unit * 3 + 'px'
    },
    sizeCompact: {
      fontSize: 12,
      padding: theme.spacing.unit / 2 + 'px ' + theme.spacing.unit + 'px '
    },
    noWrap: {},
    gutterBottom: {},
    paragraph: {},
    text: {
      padding: 'inherit'
    },
    icon: {
      marginRight: theme.spacing.unit
    }
  };
};
var getClasses = function getClasses(_ref) {
  var variant = _ref.variant,
    color = _ref.color,
    size = _ref.size,
    _ref$classes = _ref.classes,
    root = _ref$classes.root,
    label = _ref$classes.label,
    focusVisible = _ref$classes.focusVisible,
    disabled = _ref$classes.disabled,
    fullWidth = _ref$classes.fullWidth,
    myClasses = _objectWithoutProperties(_ref$classes, _excluded);
  return {
    root: (0, _classnames["default"])(root, myClasses[variant], myClasses['color' + (0, _capitalize2["default"])(color)], myClasses['size' + (0, _capitalize2["default"])(size)]),
    label: label,
    focusVisible: focusVisible,
    disabled: disabled,
    fullWidth: fullWidth
  };
};
var Button = (0, _core.withStyles)(styles, {
  name: 'DsButton'
})(function (_ref2) {
  var variant = _ref2.variant,
    color = _ref2.color,
    size = _ref2.size,
    classes = _ref2.classes,
    icon = _ref2.icon,
    children = _ref2.children,
    props = _objectWithoutProperties(_ref2, _excluded2);
  return /*#__PURE__*/_react["default"].createElement(_core.Button, _extends({
    classes: getClasses({
      variant: variant,
      color: color,
      size: size,
      classes: classes
    })
  }, props), icon && /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.icon
  }, icon), children);
});
Button.propTypes = process.env.NODE_ENV !== 'production' ? {
  icon: _propTypes["default"].node,
  color: _PropTypesConstants["default"].ButtonColors,
  variant: _PropTypesConstants["default"].ButtonVariants,
  size: _PropTypesConstants["default"].ButtonSizes
} : {};
Button.defaultProps = {
  color: 'default',
  variant: 'ghost',
  size: 'normal'
};
Button.displayName = 'DsButton';
var _default = Button;
exports["default"] = _default;