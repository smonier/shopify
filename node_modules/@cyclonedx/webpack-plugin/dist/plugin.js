"use strict";
/*!
This file is part of CycloneDX Webpack plugin.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

SPDX-License-Identifier: Apache-2.0
Copyright (c) OWASP Foundation. All Rights Reserved.
*/
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _CycloneDxWebpackPlugin_instances, _CycloneDxWebpackPlugin_compilationHook, _CycloneDxWebpackPlugin_makeRootComponent, _CycloneDxWebpackPlugin_finalizeBom, _CycloneDxWebpackPlugin_makeTools;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CycloneDxWebpackPlugin = void 0;
const CDX = require("@cyclonedx/cyclonedx-library");
const fs_1 = require("fs");
const normalizePackageJson = require("normalize-package-data");
const path_1 = require("path");
const webpack_1 = require("webpack");
const _helpers_1 = require("./_helpers");
const extractor_1 = require("./extractor");
class ValidationError extends Error {
    constructor(message, details) {
        super(message);
        this.details = details;
    }
}
/** @public */
class CycloneDxWebpackPlugin {
    constructor({ specVersion = CDX.Spec.Version.v1dot4, reproducibleResults = false, validateResults = true, outputLocation = './cyclonedx', includeWellknown = true, wellknownLocation = './.well-known', rootComponentAutodetect = true, rootComponentType = CDX.Enums.ComponentType.Application, rootComponentName = undefined, rootComponentVersion = undefined } = {}) {
        _CycloneDxWebpackPlugin_instances.add(this);
        this.specVersion = specVersion;
        this.reproducibleResults = reproducibleResults;
        this.validateResults = validateResults;
        this.resultXml = (0, path_1.join)(outputLocation, './bom.xml');
        this.resultJson = (0, path_1.join)(outputLocation, './bom.json');
        this.resultWellknown = includeWellknown
            ? (0, path_1.join)(wellknownLocation, './sbom')
            : undefined;
        this.rootComponentAutodetect = rootComponentAutodetect;
        this.rootComponentType = rootComponentType;
        this.rootComponentName = rootComponentName;
        this.rootComponentVersion = rootComponentVersion;
    }
    apply(compiler) {
        const pluginName = this.constructor.name;
        compiler.hooks.thisCompilation.tap(pluginName, __classPrivateFieldGet(this, _CycloneDxWebpackPlugin_instances, "m", _CycloneDxWebpackPlugin_compilationHook).bind(this));
    }
}
exports.CycloneDxWebpackPlugin = CycloneDxWebpackPlugin;
_CycloneDxWebpackPlugin_instances = new WeakSet(), _CycloneDxWebpackPlugin_compilationHook = function _CycloneDxWebpackPlugin_compilationHook(compilation) {
    const pluginName = this.constructor.name;
    const logger = compilation.getLogger(pluginName);
    const spec = CDX.Spec.SpecVersionDict[this.specVersion];
    if (spec === undefined) {
        logger.warn('Skip CycloneDX SBOM generation due to unknown specVersion: %j Expected one of: %j', this.specVersion, Object.keys(CDX.Spec.SpecVersionDict));
        return;
    }
    const cdxExternalReferenceFactory = new CDX.Factories.FromNodePackageJson.ExternalReferenceFactory();
    const cdxLicenseFactory = new CDX.Factories.LicenseFactory();
    const cdxPurlFactory = new CDX.Factories.FromNodePackageJson.PackageUrlFactory('npm');
    const cdxToolBuilder = new CDX.Builders.FromNodePackageJson.ToolBuilder(cdxExternalReferenceFactory);
    const cdxComponentBuilder = new CDX.Builders.FromNodePackageJson.ComponentBuilder(cdxExternalReferenceFactory, cdxLicenseFactory);
    const bom = new CDX.Models.Bom();
    bom.metadata.lifecycles.add(CDX.Enums.LifecyclePhase.Build);
    bom.metadata.component = __classPrivateFieldGet(this, _CycloneDxWebpackPlugin_instances, "m", _CycloneDxWebpackPlugin_makeRootComponent).call(this, compilation.compiler.context, cdxComponentBuilder, logger.getChildLogger('RootComponentBuilder'));
    const serializeOptions = {
        sortLists: this.reproducibleResults,
        space: 2 // TODO add option to have this configurable
    };
    let xmlSerializer;
    try {
        xmlSerializer = new CDX.Serialize.XmlSerializer(new CDX.Serialize.XML.Normalize.Factory(spec));
    }
    catch {
        /* pass */
    }
    const xmlValidator = this.validateResults && xmlSerializer !== undefined
        ? new CDX.Validation.XmlValidator(spec.version)
        : undefined;
    let jsonSerializer;
    try {
        jsonSerializer = new CDX.Serialize.JsonSerializer(new CDX.Serialize.JSON.Normalize.Factory(spec));
    }
    catch {
        /* pass */
    }
    const jsonValidator = this.validateResults && jsonSerializer !== undefined
        ? new CDX.Validation.JsonStrictValidator(spec.version)
        : undefined;
    const toBeSerialized = new Map();
    if (xmlSerializer !== undefined) {
        toBeSerialized.set(this.resultXml, [xmlSerializer, xmlValidator]);
    }
    if (jsonSerializer !== undefined) {
        toBeSerialized.set(this.resultJson, [jsonSerializer, jsonValidator]);
        if (this.resultWellknown !== undefined) {
            toBeSerialized.set(this.resultWellknown, [jsonSerializer, jsonValidator]);
        }
    }
    compilation.hooks.afterOptimizeTree.tap(pluginName, (_, modules) => {
        const thisLogger = logger.getChildLogger('ComponentFetcher');
        const extractor = new extractor_1.Extractor(compilation, cdxComponentBuilder, cdxPurlFactory);
        thisLogger.log('generating components...');
        for (const component of extractor.generateComponents(modules, thisLogger.getChildLogger('Extractor'))) {
            if (bom.metadata.component !== undefined &&
                bom.metadata.component.group === component.group &&
                bom.metadata.component.name === component.name &&
                bom.metadata.component.version === component.version) {
                // metadata matches this exact component.
                // -> so the component is actually treated as the root component.
                thisLogger.debug('update bom.metadata.component - replace', bom.metadata.component, 'with', component);
                bom.metadata.component = component;
            }
            else {
                thisLogger.debug('add to bom.components', component);
                bom.components.add(component);
            }
        }
        thisLogger.log('generated components.');
        thisLogger.log('finalizing BOM...');
        __classPrivateFieldGet(this, _CycloneDxWebpackPlugin_instances, "m", _CycloneDxWebpackPlugin_finalizeBom).call(this, bom, cdxToolBuilder, cdxPurlFactory, logger.getChildLogger('BomFinalizer'));
        thisLogger.log('finalized BOM.');
    });
    compilation.hooks.processAssets.tapPromise({
        name: pluginName,
        stage: webpack_1.Compilation.PROCESS_ASSETS_STAGE_ADDITIONAL
    }, async () => {
        const compileBomAsset = async function (file, serializer, validator) {
            const thisLogger = logger.getChildLogger('BomAssetCompiler');
            const serialized = serializer.serialize(bom, serializeOptions);
            if (undefined !== validator) {
                try {
                    const validationErrors = await validator.validate(serialized);
                    if (validationErrors !== null) {
                        thisLogger.debug('BOM result invalid. details: ', validationErrors);
                        throw new ValidationError(`Failed to generate valid BOM "${file}"\n` +
                            'Please report the issue and provide the npm lock file of the current project to:\n' +
                            'https://github.com/CycloneDX/cyclonedx-webpack-plugin/issues/new?template=ValidationError-report.md&labels=ValidationError&title=%5BValidationError%5D', validationErrors);
                    }
                }
                catch (err) {
                    if (err instanceof CDX.Validation.MissingOptionalDependencyError) {
                        thisLogger.info('skipped validate BOM:', err.message);
                    }
                    else {
                        thisLogger.error('unexpected error');
                        throw err;
                    }
                }
            }
            const assetAction = compilation.getAsset(file) === undefined
                ? 'emitAsset'
                : 'updateAsset';
            compilation[assetAction](file, webpack_1.sources.CompatSource.from({
                source: () => serialized
            }));
            return true;
        };
        const promises = [];
        toBeSerialized.forEach(([serializer, validator], file) => {
            promises.push(compileBomAsset(file, serializer, validator));
        });
        await Promise.all(promises);
    });
}, _CycloneDxWebpackPlugin_makeRootComponent = function _CycloneDxWebpackPlugin_makeRootComponent(path, builder, logger) {
    const thisPackageJson = this.rootComponentAutodetect
        ? (0, _helpers_1.getPackageDescription)(path)?.packageJson
        : { name: this.rootComponentName, version: this.rootComponentVersion };
    if (thisPackageJson === undefined) {
        return undefined;
    }
    normalizePackageJson(thisPackageJson, w => { logger.debug('normalizePackageJson from PkgPath', path, 'caused:', w); });
    return builder.makeComponent(thisPackageJson);
}, _CycloneDxWebpackPlugin_finalizeBom = function _CycloneDxWebpackPlugin_finalizeBom(bom, cdxToolBuilder, cdxPurlFactory, logger) {
    bom.serialNumber = this.reproducibleResults
        ? undefined
        : CDX.Utils.BomUtility.randomSerialNumber();
    bom.metadata.timestamp = this.reproducibleResults
        ? undefined
        : new Date();
    for (const tool of __classPrivateFieldGet(this, _CycloneDxWebpackPlugin_instances, "m", _CycloneDxWebpackPlugin_makeTools).call(this, cdxToolBuilder, logger.getChildLogger('ToolMaker'))) {
        bom.metadata.tools.add(tool);
    }
    if (bom.metadata.component !== undefined) {
        bom.metadata.component.type = this.rootComponentType;
        bom.metadata.component.purl = cdxPurlFactory.makeFromComponent(bom.metadata.component);
        bom.metadata.component.bomRef.value = bom.metadata.component.purl?.toString();
    }
}, _CycloneDxWebpackPlugin_makeTools = function* _CycloneDxWebpackPlugin_makeTools(builder, logger) {
    const packageJsonPaths = [(0, path_1.resolve)(module.path, '..', 'package.json')];
    const libs = [
        '@cyclonedx/cyclonedx-library'
    ].map(s => s.split('/', 2));
    const nodeModulePaths = require.resolve.paths('__some_none-native_package__') ?? [];
    /* eslint-disable no-labels */
    libsLoop: for (const lib of libs) {
        for (const nodeModulePath of nodeModulePaths) {
            const packageJsonPath = (0, path_1.resolve)(nodeModulePath, ...lib, 'package.json');
            if ((0, fs_1.existsSync)(packageJsonPath)) {
                packageJsonPaths.push(packageJsonPath);
                continue libsLoop;
            }
        }
    }
    /* eslint-enable no-labels */
    for (const packageJsonPath of packageJsonPaths) {
        logger.log('try to build new Tool from PkgPath', packageJsonPath);
        const packageJson = (0, _helpers_1.loadJsonFile)(packageJsonPath) ?? {};
        normalizePackageJson(packageJson, w => { logger.debug('normalizePackageJson from PkgPath', packageJsonPath, 'caused:', w); });
        const tool = builder.makeTool(packageJson);
        if (tool !== undefined) {
            yield tool;
        }
    }
};
//# sourceMappingURL=plugin.js.map