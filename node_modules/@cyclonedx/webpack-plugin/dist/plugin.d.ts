/*!
This file is part of CycloneDX Webpack plugin.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

SPDX-License-Identifier: Apache-2.0
Copyright (c) OWASP Foundation. All Rights Reserved.
*/
import * as CDX from '@cyclonedx/cyclonedx-library';
import { type Compiler } from 'webpack';
/** @public */
export interface CycloneDxWebpackPluginOptions {
    /**
     * Which version of {@link https://github.com/CycloneDX/specification CycloneDX spec} to use.
     * Defaults to one that is the latest supported of this application.
     */
    specVersion?: CycloneDxWebpackPlugin['specVersion'];
    /**
     * Whether to go the extra mile and make the output reproducible.
     * Reproducibility might result in loss of time- and random-based-values.
     *
     * @default false
     */
    reproducibleResults?: CycloneDxWebpackPlugin['reproducibleResults'];
    /**
     * Whether to validate the BOM result.
     * Validation is skipped, if requirements not met. Requires {@link https://github.com/CycloneDX/cyclonedx-javascript-library#optional-dependencies transitive optional dependencies}.
     *
     * @default true
     */
    validateResults?: CycloneDxWebpackPlugin['validateResults'];
    /**
     * Path to write the output to.
     * The path is relative to webpack's overall output path.
     *
     * @default './cyclonedx'
     */
    outputLocation?: string;
    /**
     * Whether to write the Wellknowns.
     *
     * @default true
     */
    includeWellknown?: boolean;
    /**
     * Path to write the Wellknowns to.
     * The path is relative to webpack's overall output path.
     *
     * @default './.well-known'
     */
    wellknownLocation?: string;
    /**
     * Whether to try auto-detection of the RootComponent.
     *
     * Tries to find the nearest `package.json` and build a CycloneDX component from it,
     * so it can be assigned to `bom.metadata.component`.
     *
     * @default true
     */
    rootComponentAutodetect?: CycloneDxWebpackPlugin['rootComponentAutodetect'];
    /**
     * Set the RootComponent's type.
     * See {@link https://cyclonedx.org/docs/1.6/json/#metadata_component_type the list of valid values}.
     *
     * @default 'application'
     */
    rootComponentType?: CycloneDxWebpackPlugin['rootComponentType'];
    /**
     * If `rootComponentAutodetect` is disabled, then
     * this value is assumed as the "name" of the `package.json`.
     *
     * @default undefined
     */
    rootComponentName?: CycloneDxWebpackPlugin['rootComponentName'];
    /**
     * If `rootComponentAutodetect` is disabled, then
     * this value is assumed as the "version" of the `package.json`.
     *
     * @default undefined
     */
    rootComponentVersion?: CycloneDxWebpackPlugin['rootComponentVersion'];
}
/** @public */
export declare class CycloneDxWebpackPlugin {
    #private;
    specVersion: CDX.Spec.Version;
    reproducibleResults: boolean;
    validateResults: boolean;
    resultXml: string;
    resultJson: string;
    resultWellknown: string | undefined;
    rootComponentAutodetect: boolean;
    rootComponentType: CDX.Models.Component['type'];
    rootComponentName: CDX.Models.Component['name'] | undefined;
    rootComponentVersion: CDX.Models.Component['version'] | undefined;
    constructor({ specVersion, reproducibleResults, validateResults, outputLocation, includeWellknown, wellknownLocation, rootComponentAutodetect, rootComponentType, rootComponentName, rootComponentVersion }?: CycloneDxWebpackPluginOptions);
    apply(compiler: Compiler): void;
}
