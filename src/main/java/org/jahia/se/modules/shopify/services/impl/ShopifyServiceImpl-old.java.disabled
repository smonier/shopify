package org.jahia.se.modules.shopify.services.impl;

import org.jahia.se.modules.shopify.services.ShopifyService;
import org.osgi.service.cm.ConfigurationException;
import org.osgi.service.cm.ManagedService;
import org.osgi.service.component.annotations.Component;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.awt.*;
import java.io.IOException;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.util.Dictionary;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import com.sun.net.httpserver.HttpServer;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpExchange;

@Component(service = {ShopifyService.class, ManagedService.class}, property = "service.pid=org.jahia.se.modules.shopify", immediate = true)
public class ShopifyServiceImpl implements ShopifyService, ManagedService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ShopifyServiceImpl.class);

    private String clientId;
    private String secretId;
    private String scopes;
    private String redirectUri;

    // Public static map to store tokens
    public static final Map<String, String> tokenStore = new ConcurrentHashMap<>();

    @Override
    public void updateProduct(String shopName, String productId, Map<String, Object> productData) throws IOException {
        String accessToken = tokenStore.get(shopName);
        if (accessToken == null) {
            LOGGER.error("Access token not found for shop: " + shopName);
            throw new IllegalStateException("Access token not found for shop: " + shopName);
        }

        String productUrlTemplate = String.format("https://%s.myshopify.com/admin/api/2024-04/products/%%s.json", shopName);
        
        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
            String productUrl = String.format(productUrlTemplate, productId);
            HttpPut httpPut = new HttpPut(productUrl);

            ObjectMapper objectMapper = new ObjectMapper();
            String json = objectMapper.writeValueAsString(productData);

            httpPut.setEntity(new StringEntity(json));
            httpPut.setHeader("Content-Type", "application/json");
            httpPut.setHeader("X-Shopify-Access-Token", accessToken);

            try (CloseableHttpResponse response = httpClient.execute(httpPut)) {
                String responseBody = EntityUtils.toString(response.getEntity());
                LOGGER.info("Response: " + responseBody);
            } catch (IOException e) {
                LOGGER.error("Error executing HTTP PUT request", e);
                throw e;
            }
        } catch (IOException e) {
            LOGGER.error("Error creating HTTP client", e);
            throw e;
        }
    }

    public String generateAuthorizationUrl(String shopName) {
        try {
            return String.format(
                    "https://%s.myshopify.com/admin/oauth/authorize?client_id=%s&scope=%s&redirect_uri=%s",
                    shopName, clientId, scopes, URLEncoder.encode(redirectUri, "UTF-8"));
        } catch (Exception e) {
            LOGGER.error("Error generating authorization URL", e);
            return null;
        }
    }

    public void handleOAuthFlow(String shopName) throws IOException, URISyntaxException, InterruptedException {
        String authUrl = generateAuthorizationUrl(shopName);
        if (authUrl == null) {
            LOGGER.error("Failed to generate authorization URL");
            return;
        }

        // Start a simple HTTP server to listen for the OAuth callback
        HttpServer server = HttpServer.create(new InetSocketAddress(8080), 0);
        server.createContext("/callback", new OAuthCallbackHandler());
        server.setExecutor(null);
        server.start();

        // Open the authorization URL in the default web browser
        if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
            Desktop.getDesktop().browse(new URI(authUrl));
        } else {
            LOGGER.info("Please open the following URL in your browser: " + authUrl);
        }

        // Wait for the callback to complete
        synchronized (OAuthCallbackHandler.lock) {
            OAuthCallbackHandler.lock.wait();
        }

        server.stop(0);
    }

    public String generateAccessToken(String authorizationCode, String shopName) {
        String tokenUrl = String.format("https://%s.myshopify.com/admin/oauth/access_token", shopName);
        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
            HttpPost httpPost = new HttpPost(tokenUrl);

            Map<String, String> tokenRequest = new HashMap<>();
            tokenRequest.put("client_id", clientId);
            tokenRequest.put("client_secret", secretId);
            tokenRequest.put("code", authorizationCode);

            ObjectMapper objectMapper = new ObjectMapper();
            String json = objectMapper.writeValueAsString(tokenRequest);
            httpPost.setEntity(new StringEntity(json));
            httpPost.setHeader("Content-Type", "application/json");

            try (CloseableHttpResponse response = httpClient.execute(httpPost)) {
                int statusCode = response.getStatusLine().getStatusCode();
                String responseBody = EntityUtils.toString(response.getEntity());

                if (statusCode == 200) {
                    Map<String, Object> responseMap = objectMapper.readValue(responseBody, Map.class);
                    return (String) responseMap.get("access_token");
                } else {
                    LOGGER.error("Error: Received HTTP status code " + statusCode);
                    LOGGER.error("Response Body: " + responseBody);
                    return null;
                }
            } catch (IOException e) {
                LOGGER.error("Error executing HTTP POST request", e);
                throw e;
            }
        } catch (IOException e) {
            LOGGER.error("Error creating HTTP client", e);
            return null;
        }
    }

    @Override
    public void updated(Dictionary<String, ?> dictionary) throws ConfigurationException {
        if (dictionary != null) {
            clientId = (String) dictionary.get("shopify.clientId");
            secretId = (String) dictionary.get("shopify.secretId");
            scopes = (String) dictionary.get("shopify.scopes");
            redirectUri = (String) dictionary.get("shopify.redirect_uri");
        }
        if (!(clientId != null && !clientId.trim().isEmpty()) || !(secretId != null && !secretId.trim().isEmpty())) {
            LOGGER.error("Shopify config not defined. Please add it to org.jahia.se.modules.shopify.cfg");
        }
        LOGGER.debug("Shopify Config = {}", clientId);
    }

   
}
